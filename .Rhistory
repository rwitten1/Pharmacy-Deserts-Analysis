infcd4_200u = sum(Infected.CD4.200.To.349..Not.On.ART., # everyone with CD4 > 200
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_all = sum(Infected.CD4.Under.200..Not.On.ART.,
Infected.CD4.200.To.349..Not.On.ART.,
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.),
deathsfromhiv = sum(Died_from_HIV)*pop_scaling_factor_inv) %>%
mutate(infcd4_u200_costs = infcd4_u200*costs_forloop$cost_all_main_hivcare200below/12,       # Need to divide by 12 because our people are in months but these costs are in yearly
infcd4_200_349_costs = infcd4_200_349*costs_forloop$`cost_all_main_hivcare200-350`/12,
infcd4_350_499_costs = infcd4_350_499*costs_forloop$cost_all_main_hivcare350up/12,
infcd4_500u_costs = infcd4_500u*costs_forloop$cost_all_main_hivcare350up/12,
deathsfromhiv_costs = deathsfromhiv*costs_forloop$cost_all_main_hivdeath) %>%
rowwise() %>%
mutate(costofillness_total_moh = sum(infcd4_u200_costs,
infcd4_200_349_costs,
infcd4_350_499_costs,
infcd4_500u_costs,
deathsfromhiv_costs)) %>%
full_join(discount_factors, by = "year_int") %>%
full_join(gdpgrowth_factors, by = "year_int") %>%
full_join(incomegrowth_factors, be = "year_int") %>%
mutate(costsinformalcare = infcd4_200u*costs_forloop$cost_all_main_informalcare)
costillness_df <- df %>% group_by(year_int) %>%
summarise(infcd4_u200 = sum(Infected.CD4.Under.200..Not.On.ART.)*pop_scaling_factor_inv/12, # Divide by 12 to get ppl of this level of illness in 1 month
infcd4_200_349 = sum(Infected.CD4.200.To.349..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_350_499 = sum(Infected.CD4.350.To.499..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_500u = sum(Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_200u = sum(Infected.CD4.200.To.349..Not.On.ART., # everyone with CD4 > 200
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_all = sum(Infected.CD4.Under.200..Not.On.ART.,
Infected.CD4.200.To.349..Not.On.ART.,
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.),
deathsfromhiv = sum(Died_from_HIV)*pop_scaling_factor_inv) %>%
mutate(infcd4_u200_costs = infcd4_u200*costs_forloop$cost_all_main_hivcare200below/12,       # Need to divide by 12 because our people are in months but these costs are in yearly
infcd4_200_349_costs = infcd4_200_349*costs_forloop$`cost_all_main_hivcare200-350`/12,
infcd4_350_499_costs = infcd4_350_499*costs_forloop$cost_all_main_hivcare350up/12,
infcd4_500u_costs = infcd4_500u*costs_forloop$cost_all_main_hivcare350up/12,
deathsfromhiv_costs = deathsfromhiv*costs_forloop$cost_all_main_hivdeath) %>%
rowwise() %>%
mutate(costofillness_total_moh = sum(infcd4_u200_costs,
infcd4_200_349_costs,
infcd4_350_499_costs,
infcd4_500u_costs,
deathsfromhiv_costs)) %>%
full_join(discount_factors, by = "year_int") %>%
full_join(gdpgrowth_factors, by = "year_int") %>%
full_join(incomegrowth_factors, be = "year_int") %>%
mutate(costsinformalcare = infcd4_all*costs_forloop$cost_all_main_informalcare)
costs_forloop$cost_all_main_informalcare
costillness_df <- df %>% group_by(year_int) %>%
summarise(infcd4_u200 = sum(Infected.CD4.Under.200..Not.On.ART.)*pop_scaling_factor_inv/12, # Divide ppl by 12 but keep costs in annual amounts
infcd4_200_349 = sum(Infected.CD4.200.To.349..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_350_499 = sum(Infected.CD4.350.To.499..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_500u = sum(Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_200u = sum(Infected.CD4.200.To.349..Not.On.ART., # everyone with CD4 > 200
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_all = sum(Infected.CD4.Under.200..Not.On.ART.,
Infected.CD4.200.To.349..Not.On.ART.,
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
deathsfromhiv = sum(Died_from_HIV)*pop_scaling_factor_inv) %>%                # Death is one instant, don't need to divide by 12
mutate(infcd4_u200_costs = infcd4_u200*costs_forloop$cost_all_main_hivcare200below,     # Keep costs in annual amounts
infcd4_200_349_costs = infcd4_200_349*costs_forloop$`cost_all_main_hivcare200-350`,
infcd4_350_499_costs = infcd4_350_499*costs_forloop$cost_all_main_hivcare350up,
infcd4_500u_costs = infcd4_500u*costs_forloop$cost_all_main_hivcare350up,
deathsfromhiv_costs = deathsfromhiv*costs_forloop$cost_all_main_hivdeath) %>%
rowwise() %>%
mutate(costofillness_total_moh = sum(infcd4_u200_costs,
infcd4_200_349_costs,
infcd4_350_499_costs,
infcd4_500u_costs,
deathsfromhiv_costs)) %>%
full_join(discount_factors, by = "year_int") %>%
full_join(gdpgrowth_factors, by = "year_int") %>%
full_join(incomegrowth_factors, be = "year_int") %>%
mutate(costsinformalcare = infcd4_all*costs_forloop$cost_all_main_informalcare*12, # costs for informal care need to be in annual not monthly
cost_lostwages_u200 = infcd4_u200*(income_day*costs_forloop$time_all_main_dayslostwages_200below)*12, # turn days of lost wages per month to days of lost wages per year
cost_lostwages_200u = infcd4_200u*(income_day*costs_forloop$time_all_main_dayslostwages_200up)*12, #turn days of lost wages per month into days of lost wages per year
cost_lostprod_absent = infcd4_all*((costs_forloop$time_all_main_dayslostprod_absent/30)*12* # all sick ppl * % prod days lost per month absenteeism * 12 months *
(gdpgrowth_factors$gdp_annual)*                                                           # * gdp per year
(costs_forloop$rate_all_main_laborforce)*(costs_forloop$rate_all_main_employment)), # * labor force rate * employment rate
cost_lostprod_present = infcd4_all*(costs_forloop$time_all_main_dayslostprod_present/30)*12* # all sick ppl * % prod days lost per month presenteeism * 12 months *
(gdpgrowth_factors$gdp_annual)*                                                           # * gdp per year
(costs_forloop$rate_all_main_laborforce)*(costs_forloop$rate_all_main_employment)) %>%
mutate(costofillness_total_societal = sum(costofillness_total_moh,
costsinformalcare,
cost_lostwages_u200,
cost_lostwages_200u,
cost_lostprod_absent,
cost_lostprod_present))
costillness_df <- df %>% group_by(year_int) %>%
summarise(infcd4_u200 = sum(Infected.CD4.Under.200..Not.On.ART.)*pop_scaling_factor_inv/12, # Divide ppl by 12 but keep costs in annual amounts
infcd4_200_349 = sum(Infected.CD4.200.To.349..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_350_499 = sum(Infected.CD4.350.To.499..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_500u = sum(Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_200u = sum(Infected.CD4.200.To.349..Not.On.ART., # everyone with CD4 > 200
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_all = sum(Infected.CD4.Under.200..Not.On.ART.,
Infected.CD4.200.To.349..Not.On.ART.,
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
deathsfromhiv = sum(Died_from_HIV)*pop_scaling_factor_inv) %>%                # Death is one instant, don't need to divide by 12
mutate(infcd4_u200_costs = infcd4_u200*costs_forloop$cost_all_main_hivcare200below,     # Keep costs in annual amounts
infcd4_200_349_costs = infcd4_200_349*costs_forloop$`cost_all_main_hivcare200-350`,
infcd4_350_499_costs = infcd4_350_499*costs_forloop$cost_all_main_hivcare350up,
infcd4_500u_costs = infcd4_500u*costs_forloop$cost_all_main_hivcare350up,
deathsfromhiv_costs = deathsfromhiv*costs_forloop$cost_all_main_hivdeath) %>%
rowwise() %>%
mutate(costofillness_total_moh = sum(infcd4_u200_costs,
infcd4_200_349_costs,
infcd4_350_499_costs,
infcd4_500u_costs,
deathsfromhiv_costs)) %>%
full_join(discount_factors, by = "year_int") %>%
full_join(gdpgrowth_factors, by = "year_int") %>%
full_join(incomegrowth_factors, be = "year_int") %>%
mutate(costsinformalcare = infcd4_all*costs_forloop$cost_all_main_informalcare*12, # costs for informal care need to be in annual not monthly
cost_lostwages_u200 = infcd4_u200*(income_day*costs_forloop$time_all_main_dayslostwages_200below)*12, # turn days of lost wages per month to days of lost wages per year
cost_lostwages_200u = infcd4_200u*(income_day*costs_forloop$time_all_main_dayslostwages_200up)*12, #turn days of lost wages per month into days of lost wages per year
cost_lostprod_absent = infcd4_all*((costs_forloop$time_all_main_dayslostprod_absent/30)*12* # all sick ppl * % prod days lost per month absenteeism * 12 months *
(gdpgrowth_factors$gdp_annual)*                                                           # * gdp per year
(costs_forloop$rate_all_main_laborforce)*(costs_forloop$rate_all_main_employment)), # * labor force rate * employment rate
cost_lostprod_present = infcd4_all*(costs_forloop$time_all_main_dayslostprod_present/30)*12* # all sick ppl * % prod days lost per month presenteeism * 12 months *
(gdpgrowth_factors$gdp_annual)*                                                           # * gdp per year
(costs_forloop$rate_all_main_laborforce)*(costs_forloop$rate_all_main_employment))
costillness_df <- df %>% group_by(year_int) %>%
summarise(infcd4_u200 = sum(Infected.CD4.Under.200..Not.On.ART.)*pop_scaling_factor_inv/12, # Divide ppl by 12 but keep costs in annual amounts
infcd4_200_349 = sum(Infected.CD4.200.To.349..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_350_499 = sum(Infected.CD4.350.To.499..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_500u = sum(Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_200u = sum(Infected.CD4.200.To.349..Not.On.ART., # everyone with CD4 > 200
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_all = sum(Infected.CD4.Under.200..Not.On.ART.,
Infected.CD4.200.To.349..Not.On.ART.,
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
deathsfromhiv = sum(Died_from_HIV)*pop_scaling_factor_inv) %>%                # Death is one instant, don't need to divide by 12
mutate(infcd4_u200_costs = infcd4_u200*costs_forloop$cost_all_main_hivcare200below,     # Keep costs in annual amounts
infcd4_200_349_costs = infcd4_200_349*costs_forloop$`cost_all_main_hivcare200-350`,
infcd4_350_499_costs = infcd4_350_499*costs_forloop$cost_all_main_hivcare350up,
infcd4_500u_costs = infcd4_500u*costs_forloop$cost_all_main_hivcare350up,
deathsfromhiv_costs = deathsfromhiv*costs_forloop$cost_all_main_hivdeath) %>%
rowwise() %>%
mutate(costofillness_total_moh = sum(infcd4_u200_costs,
infcd4_200_349_costs,
infcd4_350_499_costs,
infcd4_500u_costs,
deathsfromhiv_costs)) %>%
full_join(discount_factors, by = "year_int") %>%
full_join(gdpgrowth_factors, by = "year_int") %>%
full_join(incomegrowth_factors, be = "year_int") %>%
mutate(costsinformalcare = infcd4_all*costs_forloop$cost_all_main_informalcare*12, # costs for informal care need to be in annual not monthly
cost_lostwages_u200 = infcd4_u200*(income_day*costs_forloop$time_all_main_dayslostwages_200below)*12, # turn days of lost wages per month to days of lost wages per year
cost_lostwages_200u = infcd4_200u*(income_day*costs_forloop$time_all_main_dayslostwages_200up)*12, #turn days of lost wages per month into days of lost wages per year
cost_lostprod_absent = infcd4_all*((costs_forloop$time_all_main_dayslostprod_absent/30)*12* # all sick ppl * % prod days lost per month absenteeism * 12 months *
(gdp_annual)*(costs_forloop$rate_all_main_laborforce)*(costs_forloop$rate_all_main_employment)), # * gdp per year* labor force rate * employment rate
cost_lostprod_present = infcd4_all*(costs_forloop$time_all_main_dayslostprod_present/30)*12* # all sick ppl * % prod days lost per month presenteeism * 12 months *
(gdp_annual)*(costs_forloop$rate_all_main_laborforce)*(costs_forloop$rate_all_main_employment))
costillness_df <- df %>% group_by(year_int) %>%
summarise(infcd4_u200 = sum(Infected.CD4.Under.200..Not.On.ART.)*pop_scaling_factor_inv/12, # Divide ppl by 12 but keep costs in annual amounts
infcd4_200_349 = sum(Infected.CD4.200.To.349..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_350_499 = sum(Infected.CD4.350.To.499..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_500u = sum(Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_200u = sum(Infected.CD4.200.To.349..Not.On.ART., # everyone with CD4 > 200
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_all = sum(Infected.CD4.Under.200..Not.On.ART.,
Infected.CD4.200.To.349..Not.On.ART.,
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
deathsfromhiv = sum(Died_from_HIV)*pop_scaling_factor_inv) %>%                # Death is one instant, don't need to divide by 12
mutate(infcd4_u200_costs = infcd4_u200*costs_forloop$cost_all_main_hivcare200below,     # Keep costs in annual amounts
infcd4_200_349_costs = infcd4_200_349*costs_forloop$`cost_all_main_hivcare200-350`,
infcd4_350_499_costs = infcd4_350_499*costs_forloop$cost_all_main_hivcare350up,
infcd4_500u_costs = infcd4_500u*costs_forloop$cost_all_main_hivcare350up,
deathsfromhiv_costs = deathsfromhiv*costs_forloop$cost_all_main_hivdeath) %>%
rowwise() %>%
mutate(costofillness_total_moh = sum(infcd4_u200_costs,
infcd4_200_349_costs,
infcd4_350_499_costs,
infcd4_500u_costs,
deathsfromhiv_costs)) %>%
full_join(discount_factors, by = "year_int") %>%
full_join(gdpgrowth_factors, by = "year_int") %>%
full_join(incomegrowth_factors, be = "year_int") %>%
mutate(costsinformalcare = infcd4_all*costs_forloop$cost_all_main_informalcare*12, # costs for informal care need to be in annual not monthly
cost_lostwages_u200 = infcd4_u200*(income_day*costs_forloop$time_all_main_dayslostwages_200below)*12, # turn days of lost wages per month to days of lost wages per year
cost_lostwages_200u = infcd4_200u*(income_day*costs_forloop$time_all_main_dayslostwages_200up)*12, #turn days of lost wages per month into days of lost wages per year
cost_lostprod_absent = infcd4_all*((costs_forloop$time_all_main_dayslostprod_absent/30)*12* # all sick ppl * % prod days lost per month absenteeism * 12 months *
(gdp_annual)*(costs_forloop$rate_all_main_laborforce)*(costs_forloop$rate_all_main_employment)), # * gdp per year* labor force rate * employment rate
cost_lostprod_present = infcd4_all*(costs_forloop$time_all_main_dayslostprod_present/30)*12* # same calc but for days lost from presenteeism
(gdp_annual)*(costs_forloop$rate_all_main_laborforce)*(costs_forloop$rate_all_main_employment)) %>%
mutate(costofillness_total_societal = sum(costofillness_total_moh,
costsinformalcare,
cost_lostwages_u200,
cost_lostwages_200u,
cost_lostprod_absent,
cost_lostprod_present))
costillness_df <- df %>% group_by(year_int) %>%
summarise(infcd4_u200 = sum(Infected.CD4.Under.200..Not.On.ART.)*pop_scaling_factor_inv/12, # Divide ppl by 12 but keep costs in annual amounts
infcd4_200_349 = sum(Infected.CD4.200.To.349..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_350_499 = sum(Infected.CD4.350.To.499..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_500u = sum(Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_200u = sum(Infected.CD4.200.To.349..Not.On.ART., # everyone with CD4 > 200
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
infcd4_all = sum(Infected.CD4.Under.200..Not.On.ART.,
Infected.CD4.200.To.349..Not.On.ART.,
Infected.CD4.350.To.499..Not.On.ART.,
Infected.CD4.500.Plus..Not.On.ART.)*pop_scaling_factor_inv/12,
deathsfromhiv = sum(Died_from_HIV)*pop_scaling_factor_inv) %>%                # Death is one instant, don't need to divide by 12
mutate(infcd4_u200_costs = infcd4_u200*costs_forloop$cost_all_main_hivcare200below,     # Keep costs in annual amounts
infcd4_200_349_costs = infcd4_200_349*costs_forloop$`cost_all_main_hivcare200-350`,
infcd4_350_499_costs = infcd4_350_499*costs_forloop$cost_all_main_hivcare350up,
infcd4_500u_costs = infcd4_500u*costs_forloop$cost_all_main_hivcare350up,
deathsfromhiv_costs = deathsfromhiv*costs_forloop$cost_all_main_hivdeath) %>%
rowwise() %>%
mutate(costofillness_total_moh = sum(infcd4_u200_costs,
infcd4_200_349_costs,
infcd4_350_499_costs,
infcd4_500u_costs,
deathsfromhiv_costs)) %>%
full_join(discount_factors, by = "year_int") %>%
full_join(gdpgrowth_factors, by = "year_int") %>%
full_join(incomegrowth_factors, be = "year_int") %>%
mutate(costsinformalcare = infcd4_all*costs_forloop$cost_all_main_informalcare*12, # costs for informal care need to be in annual not monthly
cost_lostwages_u200 = infcd4_u200*(income_day*costs_forloop$time_all_main_dayslostwages_200below)*12, # turn days of lost wages per month to days of lost wages per year
cost_lostwages_200u = infcd4_200u*(income_day*costs_forloop$time_all_main_dayslostwages_200up)*12, #turn days of lost wages per month into days of lost wages per year
cost_lostprod_absent = infcd4_all*((costs_forloop$time_all_main_dayslostprod_absent/30)*12* # all sick ppl * % prod days lost per month absenteeism * 12 months *
(gdp_annual)*(costs_forloop$rate_all_main_laborforce)*(costs_forloop$rate_all_main_employment)), # * gdp per year* labor force rate * employment rate
cost_lostprod_present = infcd4_all*(costs_forloop$time_all_main_dayslostprod_present/30)*12* # same calc but for days lost from presenteeism
(gdp_annual)*(costs_forloop$rate_all_main_laborforce)*(costs_forloop$rate_all_main_employment)) %>%
mutate(costofillness_total_societal = sum(costofillness_total_moh,
costsinformalcare,
cost_lostwages_u200,
cost_lostwages_200u,
cost_lostprod_absent,
cost_lostprod_present)) %>%
ungroup() %>%
summarise(costofillness_moh_disc = sum(costofillness_total_moh*discount_factor),
costofillness_societal_disc = sum(costofillness_total_societal*discount_factor))
# Put all costs together in 1 df, calculate totals for MOH vs societal perspective and community vs facility
costsall_df <- cbind(costsrx_df, costsdx_df, costillness_df)
head(costsall_df)
colnames(costsall_df)
# # install census API key (only need to do this once per computer ever)
# my_api_key <- "083ae7aa6363d62361c694445ce61298cd1c2825"
# census_api_key(my_api_key, install = TRUE)
Sys.getenv("CENSUS_API_KEY") # to check if the api key is loaded
# # install Google API key
register_google(key = "AIzaSyCXK_6dM5In4fQEDZaxPuWzE9ZX-cM9I6Y", write = TRUE)
?register_google
??register_google
rootDir <- "~/OneDrive/Documents/School Stuff/Dissertation/Pharmacy-Deserts-Analysis/"
inputDir <- paste0(rootDir, "Input/")
outputDir <- paste0(rootDir, "Output/")
figuresDir <- paste0(rootDir, "Figures/")
setwd(rootDir)
## Load files needed:
# Address data from NCPDP
providerinfo_df <- readxl::read_excel(paste0(input_dir,"Provider Information Table.xlsx"))
paste0(input_dir,"Provider Information Table.xlsx")
rootDir <- "~/OneDrive/Documents/School Stuff/Dissertation/Pharmacy-Deserts-Analysis/"
inputDir <- paste0(rootDir, "Input/")
outputDir <- paste0(rootDir, "Output/")
figuresDir <- paste0(rootDir, "Figures/")
paste0(input_dir,"Provider Information Table.xlsx")
# Set working drive and files
rootDir <- "~/OneDrive/Documents/School Stuff/Dissertation/Pharmacy-Deserts-Analysis/"
rootDir
paste0(inputDir,"Provider Information Table.xlsx")
## Load files needed:
# Address data from NCPDP
providerinfo_df <- readxl::read_excel(paste0(inputDir,"Provider Information Table.xlsx"))
rootDir <- "~/OneDrive/Documents/School Stuff/Dissertation/Pharmacy-Deserts-Analysis/"
inputDir <- paste0(rootDir, "Input/")
outputDir <- paste0(rootDir, "Output/")
figuresDir <- paste0(rootDir, "Figures/")
setwd(rootDir)
## Load files needed:
# NCPDP files: provider info and services
providerinfo_df <- readxl::read_excel(paste0(inputDir,"Provider Information Table.xlsx"))
services_df <- readxl::read_excel(paste0(inputDir,"Services Information Table.xlsx"))
warnings()
ruca_df <- readxl::read_excel("ruca2010revised.xlsx", sheet = 1, skip = 1)
ruca_df <- readxl::read_excel(paste0(inputDir,"ruca2010revised.xlsx"), sheet = 1, skip = 1)
View(ruca_df)
ruca_df <- readxl::read_excel(paste0(inputDir,"ruca2010revised.xlsx"), sheet = 1, skip = 1) %>%
rename(county_FIPS = `State-County FIPS Code`,
state = `Select State`,
tract_FIPS = `State-County-Tract FIPS Code (lookup by address at http://www.ffiec.gov/Geocode/)`,
ruca_1 = `Primary RUCA Code 2010`,
ruca_2 = `Secondary RUCA Code, 2010 (see errata)`) %>%
select(-`Tract Population, 2010`,-`Land Area (square miles), 2010`,-`Population Density (per square mile), 2010`)
## Merge NCPDP data:
pharmacy_df <- full_join(providerinfo_df, services_df, by = "NCPDP Provider ID")
table(pharmacy_df$`Primary Provider Type Code`, useNA = "always")
pharmacy_df <- pharmacy_df %>% filter(`Primary Provider Type Code` == 1)
table(pharmacy_df$`Physical Address State`)
## Name all variables and drop cols I don't need
# make sure col names all make sense, have factor levels, etc.
colnames(pharmacy_df)
pharmbystate_df <- pharmacy_df %>% group_by(`Physical Address State`) %>%
dplyr::summarise(n_pharm = n())
View(pharmbystate_df)
?dplyr::filter
pharmbystate_df <- pharmacy_df %>% group_by(`Physical Address State`) %>%
dplyr::summarise(n_pharm = n()) %>%
filter(!`Physical Address State` %in% c("PR", "GU", "VI", "MP")) # removing territories except DC
pharmbystate_df1 <- pharmbystate_df[1:25,]
pharmbystate_df2 <- pharmbystate_df[26:52,]
sum(pharmbystate_df1$n_pharm)
sum(pharmbystate_df2$n_pharm)
View(pharmbystate_df2)
pharmbystate_df <- pharmacy_df %>% group_by(`Physical Address State`) %>%
dplyr::summarise(n_pharm = n()) %>%
filter(!`Physical Address State` %in% c("PR", "GU", "VI", "MP", "NA")) # removing territories except DC
pharmbystate_df1 <- pharmbystate_df[1:25,]
pharmbystate_df2 <- pharmbystate_df[26:52,]
pharmbystate_df2 <- pharmbystate_df[26:52,] %>% filter(!is.na(`Physical Address State`))
sum(pharmbystate_df2$n_pharm)
# going to start with geocoding the second half alphabetically because includes WA so can compare to previous analysis
states1 <- pharmbystate_df1$`Physical Address State`
states2 <- pharmbystate_df2$`Physical Address State`
pharmacy_df1 <- filter(`Physical Address State`) %in% states1
colnames(pharmacy_df)
pharmacy_df1 <- pharmacy_df %>% filter(`Physical Address State`) %in% states1
pharmacy_df1 <- pharmacy_df %>% filter(`Physical Address State` %in% states1)
pharmacy_df2 <- pharmacy_df %>% filter(`Physical Address State` %in% states2)
table(pharmacy_df$`Physical Address State`, useNA = "always")
View(pharmbystate_df2)
colnames(pharmbystate_df1)
colnames(pharmacy_df1)
pharmacy_df2$addresses <- paste(pharmacy_df2$`Physical Address 1`,",",
pharmacy_df2$`Physical Address City`,",",
pharmacy_df2$`Physical Address State`,
pharmacy_df2$`Physical Address ZIP`)
head(pharmacy_df2$addresses)
View(pharmbystate_df2)
# do a test with just montana to confirm the NCPDP address format works
pharm_montana <- pharmacy_df2 %>% filter(`Physical Address State`  %in% "MT")
?geocode
??geocode
library(tidycensus) # interface with census API to pull data tables
library(acs) # also use this to get data from census
library(tidyverse) # data manipulation
library(ggmap) # maps using the tidyverse
library(tigris) # read in tiger shapefiles
library(ggmap) # use to register google API key for geocoding
library(leaflet) # can use with open street map and Rshiny to make interactive maps
library(mapview) # another map-making package
library(sf) # spatial features package
library(rgdal) # reading in shapefiles
library(choroplethr) #making choropleth maps easily
library(choroplethrMaps) # goes with choroplethr
library(broom) # updated version of fortify function
library(rgeos) # use point in polygon function
library(htmlwidgets) # save interactive leaflet maps as html
library(shiny) # make interactive html site
library(RColorBrewer) # f
# find lat and long of addresses using geocode and Google API (note this takes ~15 min to run)
for (i in 1:nrow(pharm_montana)) {
result <- geocode(pharm_montana$addresses[i], output = "latlona", source = "google")
pharm_montana$lon[i] <- as.numeric(result[1])
pharm_montana$lat[i] <- as.numeric(result[2])
pharm_montana$add[i] <- as.character(result[3])
}
for (i in 1:nrow(pharm_montana)) {
result <- geocode(pharm_montana$addresses[i], output = "latlon", source = "google")
pharm_montana$lon[i] <- as.numeric(result[1])
pharm_montana$lat[i] <- as.numeric(result[2])
}
# # install Google API key
register_google(key = "AIzaSyDlClWCArcWpls8ZUsRvZU8wG7sHDe-pHA", write = TRUE)
# find lat and long of addresses using geocode and Google API (note this takes ~15 min to run)
for (i in 1:nrow(pharm_montana)) {
result <- geocode(pharm_montana$addresses[i], output = "latlon", source = "google")
pharm_montana$lon[i] <- as.numeric(result[1])
pharm_montana$lat[i] <- as.numeric(result[2])
}
# # install Google API key (new key for this proj vs my old one)
register_google(key = "AIzaSyCHb9LTmOgEswBpLGgEt594kIua5NQLxKo", write = TRUE)
for (i in 1:nrow(pharm_montana)) {
result <- geocode(pharm_montana$addresses[i], output = "latlon", source = "google")
pharm_montana$lon[i] <- as.numeric(result[1])
pharm_montana$lat[i] <- as.numeric(result[2])
}
View(pharm_montana)
library(tidycensus) # interface with census API to pull data tables
library(acs) # also use this to get data from census
library(tidyverse) # data manipulation
library(ggmap) # maps using the tidyverse
library(tigris) # read in tiger shapefiles
library(ggmap) # use to register google API key for geocoding
library(leaflet) # can use with open street map and Rshiny to make interactive maps
library(mapview) # another map-making package
library(sf) # spatial features package
library(rgdal) # reading in shapefiles
library(choroplethr) #making choropleth maps easily
library(choroplethrMaps) # goes with choroplethr
library(broom) # updated version of fortify function
library(rgeos) # use point in polygon function
library(htmlwidgets) # save interactive leaflet maps as html
library(shiny) # make interactive html site
library(RColorBrewer) # for R color scales in ggplot and leaflet
# Set working drive and files
rootDir <- "~/OneDrive/Documents/School Stuff/Dissertation/Pharmacy-Deserts-Analysis/"
inputDir <- paste0(rootDir, "Input/")
outputDir <- paste0(rootDir, "Output/")
figuresDir <- paste0(rootDir, "Figures/")
setwd(rootDir)
## Load files needed:
# NCPDP files: provider info and services
providerinfo_df <- readxl::read_excel(paste0(inputDir,"Provider Information Table.xlsx"))
services_df <- readxl::read_excel(paste0(inputDir,"Services Information Table.xlsx"))
# RUCA codes from USDA https://www.ers.usda.gov/data-products/rural-urban-commuting-area-codes.aspx .
# As of Dec 2022 only 2010 RUCA codes are available- check again in a few months
ruca_df <- readxl::read_excel(paste0(inputDir,"ruca2010revised.xlsx"), sheet = 1, skip = 1) %>%
rename(county_FIPS = `State-County FIPS Code`,
state = `Select State`,
tract_FIPS = `State-County-Tract FIPS Code (lookup by address at http://www.ffiec.gov/Geocode/)`,
ruca_1 = `Primary RUCA Code 2010`,
ruca_2 = `Secondary RUCA Code, 2010 (see errata)`) %>%
select(-`Tract Population, 2010`,-`Land Area (square miles), 2010`,-`Population Density (per square mile), 2010`)
## Merge NCPDP data:
pharmacy_df <- full_join(providerinfo_df, services_df, by = "NCPDP Provider ID")
table(pharmacy_df$`Primary Provider Type Code`, useNA = "always") # get numbers of pharmacy by type
pharmacy_df <- pharmacy_df %>% filter(`Primary Provider Type Code` == 1) # then filter to just include community pharmacies
## Name all variables and drop cols I don't need
# make sure col names all make sense, have factor levels, etc.
colnames(pharmacy_df) # do this later
pharmbystate_df <- pharmacy_df %>% group_by(`Physical Address State`) %>%
dplyr::summarise(n_pharm = n()) %>%
filter(!`Physical Address State` %in% c("PR", "GU", "VI", "MP", "NA")) # removing territories except DC. (PR 1041; GU 24; VI 20; MP 9).
# break into 2 chunks:
# need to be under 40k addresses in order to stay under GoogleAPI geocoding budget limit for the month
pharmbystate_df1 <- pharmbystate_df[1:25,] # contains 31510 pharmacies
pharmbystate_df2 <- pharmbystate_df[26:52,] %>% filter(!is.na(`Physical Address State`)) #contains 30549 pharmacies
# going to start with geocoding the second half alphabetically because includes WA so can compare to previous analysis
states1 <- pharmbystate_df1$`Physical Address State`
states2 <- pharmbystate_df2$`Physical Address State`
pharmacy_df1 <- pharmacy_df %>% filter(`Physical Address State` %in% states1)
pharmacy_df2 <- pharmacy_df %>% filter(`Physical Address State` %in% states2)
# # concatenate address info into 1 column
pharmacy_df2
pharmacy_df2$addresses <- paste(pharmacy_df2$`Physical Address 1`,",",
pharmacy_df2$`Physical Address City`,",",
pharmacy_df2$`Physical Address State`,
pharmacy_df2$`Physical Address ZIP`)
# find lat and long of addresses using geocode and Google API (for 30k addresses will take a while to run)
for (i in 1:nrow(pharmacy_df2)) {
result <- geocode(pharmacy_df2$addresses[i], output = "latlon", source = "google")
pharmacy_df2$lon[i] <- as.numeric(result[1])
pharmacy_df2$lat[i] <- as.numeric(result[2])
}
warnings()
head(pharmacy_df2)
colnames(pharmacy_df2)
table(pharmacy_df2$`Physical Address State`[is.na(pharmacy_df2$lat)], useNA = "always")
table(pharmacy_df2$`Physical Address State`[is.na(pharmacy_df2$on)], useNA = "always")
table(pharmacy_df2$`Physical Address State`[is.na(pharmacy_df2$lon)], useNA = "always")
table(pharmacy_df2$`Legal Business Name`[is.na(pharmacy_df2$lon)], useNA = "always")
table(pharmacy_df2$addresses[is.na(pharmacy_df2$lon)], useNA = "always")
write.csv(pharmacy_df2, file = "pharmacy_df2_geo.csv")
# Make a df with a 3% discount rate to apply to both costs and outcomes for analysis
discount_rate <- 0.03
discount_factors <- data.frame("year_int" = 2022:2042) # time horizon of this analysis
discount_factors$discount_factor <- 1 / ((1 + discount_rate) ^ (discount_factors$year_int - 2022))
View(discount_factors)
gdpgrowth_rate <- 0.05
gdpgrowth_factors <- data.frame("year_int" = 2022:2042) #time horizon
gdpgrowth_factors$gdp_annual <- costs_forloop$cost_all_main_gdpperworker * ((1 + gdpgrowth_rate) ^ (gdpgrowth_factors$year_int - 2022))
rootDir <- "/Users/rachelwittenauer/Dropbox/HIVST + PrEP/Data Outputs and Analyses/"
input_dir <- paste0(rootDir, "EMOD output/rw1-ceav6_0115/") # full runs
# input_dir <- paste0(rootDir, "EMOD output/rw1-ceav4_0103/") # full runs
input_dir_sub <- paste0(input_dir, "Baseline-campaign_Nyanza_PrEP-CEA_2023013-")
output_dir <- paste0(rootDir,"R Analysis/")
graphDir<-paste0(rootDir, "R Analysis/2023-01-14/graph/")
output_dir<-paste0(rootDir, "R Analysis/2023-01-14/")
todaydate <-"14Jan2023"          # goes to the output file name
n_psets <- 100                   # number of parameter sets, used to make sure no files are dropped (usually 100, sometimes is 10 for tests or 250 for large runs)
runs <- data.frame("runs" = 1:n_psets) %>% mutate(n_psets = str_pad(runs, width = 4, side = "left", pad = "0"))
# Read in cost parameters
costs_forloop <- readxl::read_excel(path = paste0(output_dir, "cost_parameters_cea_20221222.xls"), sheet = 2)
# Make a df with a 3% discount rate to apply to both costs and outcomes for analysis
# Make a df with average annual income, assume 3% growth annually
incomegrowth_rate <- 0.03
incomegrowth_factors <- data.frame("year_int" = 2022:2042) #time horizon
incomegrowth_factors$income_annual <- costs_forloop$cost_all_main_annualincome * ((1 + incomegrowth_rate) ^ (incomegrowth_factors$year_int - 2022))
incomegrowth_factors$income_day <- incomegrowth_factors$income_annual/250 # assume 5 days/week for 50 week/year aka 250
incomegrowth_factors$income_minute <- incomegrowth_factors$income_day/8 # assume 8h/day working day
# Additional parameters to define
pop_ingestsize <- 2697858         # input this population size from the ingest form (is ages 15-65 only as of 2009)
pop_ingestsize2019 <- 6269579     # trying to scale pop with more recent population estimate, 2019 census (all ages population)
p_resist_prev_acute <- 0.326       # probability that PrEP resistance develops in a person who initiates PrEP while in acute HIV stage (see lit review Excel summary cell G5)
p_resist_prev_latent <- 0.326*0.5  # probability that PrEP resistance develops in a person who initiates PrEP while in latent HIV stage (conceptual estimate from Monisha)
p_resist_breakthrough <- 0.0275    # probability that PrEP resistance develops in a person who has a breakthrough HIV infection while on PrEP (see lit review Excel summary cell G101)
pathname<-c("Scenario0NoPrEP", "Scenario1RAST","Scenario2AGYW", "Scenario3Broad") # just selecting the 4 scenarios for evaluation
filepath<-list()
for(var in pathname) {
filepath[[var]]<-list.files(path = paste0(input_dir_sub, var,
"/ReportHIVByAgeAndGender"),
pattern = "*.csv", full.names = T) # change .csv to .rds once we're using rds files instead to save space
}
filepath[[1]][1]
paste0( pathname[1] , "_testcost")
