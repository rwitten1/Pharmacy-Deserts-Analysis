lang3 = as.character(Language.Code.3),
lang4 = as.character(Language.Code.4),
lang5 = as.character(Language.Code.5),
# english = ,                                           # Create a variable indicating if language is spoken at any of these pharmacies. See data dictionary.
# spanish = ,
# chinese = ,
# arabic = ,
# french = ,
# hindi = ,
# korean = ,
# italian = ,
# russian = ,
# vietnamese = ,
dispenserclass = factor(Dispenser.Class.Code,
levels = c("1","2","5","6", NA),
labels = c("Independent", "Chain", "Franchise","Government", "Unknown")),
medicare_id = as.character(Medicare.Provider.ID),
npi_id = as.character(National.Provider.ID..NPI.),
maildelivery_bin = as.character(Delivery.Service.Indicator),
maildelivery_cat = factor(Delivery.Service.Code,
levels = c("3", "4", "5", NA),
labels = c("No Rx Delivery", "Rx Delivery For A Fee", "Free Rx Delivery", "Unknown")),
compounding_bin = as.character(Compounding.Service.Indicator),
compounding_cat = factor(Compounding.Service.Code,
levels = c("6", "7", "8", "9", "10", NA),
labels = c("No compounding services", "Basic non-sterile compounding", "Complex non-sterile compounding",
"Low complexity sterile compounding", "High complexity sterile compounding", "Unknown")),
driveup_bin = as.character(Driveup.Window.Indicator),
dme_bin = as.character(DME.Indicator),
dme_cat = factor(DME.Code,
levels = c("13", "14", "15", "16", "17", "18", NA),
labels = c("No DME offered", "DME off-the-shelf, non-custom, unaccredited", "DME full range and custom, unaccredited",
"DME for pharmaceuticals and diabetic testing, accredited", "DME off-the-shelf, non-custom, accredited",
"DME full range and custom, accredite", "Unknown")),
walkinclinic_bin = as.character(Walkin.Clinic.Indicator),
walkinclinic_cat = factor(Walkin.Clinic.Code,
levels = c("19", "20", "21", "22", NA),
labels = c("No walk-in clinic", "Walk-in clinic with limited services, mid-level professional",
"Walk-in clinic with limited services, licensed physician",
"Onsite emergency room", "Unknown")),
emerg24h_bin = as.character(X24h.Emergency.Service.Indicator),
emerg24h_cat = factor(X24h.Emergency.Service.Code,
levels = c("23", "24", "25", "26", "27", NA),
labels = c("No 24h emergency service", "24h emergency remote pharmacist (call center)", "24h emergency remote pharmacist (local)",
"24h emergency pharmacist with in-person access", "24h in-person emergency pharmacist service", "Unknown")),
multidosepkg_bin = as.character(Multidose.Compliance.Indicator),
multidosepkg_cat = factor(Multidose.Compliance.Code,
levels = c("28", "29", "30", NA),
labels = c("No multidose compliance packaging", "Multidose compliance packaging to assisted living facilities only",
"Multidose compliance packaging to all", "Unknown")),
immunizations_bin = as.character(Immunizations.Provided.Indicator),
immunizations_cat = factor(Immunizations.Provided.Code,
levels = c("31", "32", "33", NA),
labels = c("No on-site immunizations", "Immunization services at select dates and times",
"Immunization services during business hours", "Unknown")),
handicapaccess_bin = as.character(Handicapped.Accessible.Indicator),
is340b_bin = as.character(X340B.Status.Indicator),
is340b_cat = factor(X340B.Status.Code,
levels = c("36", "37", "38", "39", NA),
labels = c("No 340B relationships", "Not owned by 340B entity but contracts to covered entities",
"Owned by 340B entity but also serves non-eligible patients", "Owned by 340B entity and only serves eligible patients",
"Unknown"))
) %>%
select(-ID,-NCPDP.Provider.ID, -Primary.Provider.Type.Code, -Secondary.Provider.Type.Code, -Tertiary.Provider.Type.Code, -Dispenser.Class.Code, -Medicare.Provider.ID, National.Provider.ID..NPI.,
-DBA.Name, -Physical.Address.1, -Physical.Address.2, -Physical.Address.City, -Physical.Address.State, -Physical.Address.ZIP, -County.FIPS, -MSA, -Open.24.Hours,
-Language.Code.1, -Language.Code.2, -Language.Code.3, -Language.Code.4, -Language.Code.5, -Closed.Door.Facility.Indicator, -Closed.Door.Facility.Status.Code
-Accepts.ePrescriptions.Code, -Accepts.ePrescriptions.Indicator, -Delivery.Service.Indicator, -Delivery.Service.Code, -Compounding.Service.Indicator,
-Driveup.Window.Code, -Driveup.Window.Indicator, -DME.Indicator,-DME.Code, -Walkin.Clinic.Indicator,-Walkin.Clinic.Indicator, -Multidose.Compliance.Indicator, -Multidose.Compliance.Code,
-Immunizations.Provided.Indicator, -Immunizations.Provided.Code, -Handicapped.Accessible.Indicator, -Handicapped.Accessible.Code, -X340B.Status.Indicator, -X340B.Status.Code)
pharmgeo_df3 <- pharmgeo_df2 %>% filter(Closed.Door.Facility.Indicator %in% "N", # removed 1156 closed door facilities here as well
Dispenser.Class.Code %in% "7") %>%       # removed 288 alternate dispensing sites as well
mutate(ID = as.character(ID.x),
ncpdp_id = as.character(NCPDP.Provider.ID),
legal_name = as.character(Legal.Business.Name),
dba_name = as.character(DBA.Name),
address1 = as.character(Physical.Address.1),
address2 = as.character(Physical.Address.2),
city = as.character(Physical.Address.City),
state = as.character(Physical.Address.State),
zip = as.character(Physical.Address.ZIP),
county_fips = as.character(County.FIPS),
msa = as.character(MSA),
open24h = factor(Open.24.Hours,
levels = c("N", "Y"),            # May need to code as 0/1 eventually? Use case_when
labels = c("No", "Yes")),
lang1 = as.character(Language.Code.1),                   # Language Codes indicate if the language is spoken at the pharmacy.
lang2 = as.character(Language.Code.2),
lang3 = as.character(Language.Code.3),
lang4 = as.character(Language.Code.4),
lang5 = as.character(Language.Code.5),
# english = ,                                           # Create a variable indicating if language is spoken at any of these pharmacies. See data dictionary.
# spanish = ,
# chinese = ,
# arabic = ,
# french = ,
# hindi = ,
# korean = ,
# italian = ,
# russian = ,
# vietnamese = ,
dispenserclass = factor(Dispenser.Class.Code,
levels = c("1","2","5","6", NA),
labels = c("Independent", "Chain", "Franchise","Government", "Unknown")),
medicare_id = as.character(Medicare.Provider.ID),
npi_id = as.character(National.Provider.ID..NPI.),
maildelivery_bin = as.character(Delivery.Service.Indicator),
maildelivery_cat = factor(Delivery.Service.Code,
levels = c("3", "4", "5", NA),
labels = c("No Rx Delivery", "Rx Delivery For A Fee", "Free Rx Delivery", "Unknown")),
compounding_bin = as.character(Compounding.Service.Indicator),
compounding_cat = factor(Compounding.Service.Code,
levels = c("6", "7", "8", "9", "10", NA),
labels = c("No compounding services", "Basic non-sterile compounding", "Complex non-sterile compounding",
"Low complexity sterile compounding", "High complexity sterile compounding", "Unknown")),
driveup_bin = as.character(Driveup.Window.Indicator),
dme_bin = as.character(DME.Indicator),
dme_cat = factor(DME.Code,
levels = c("13", "14", "15", "16", "17", "18", NA),
labels = c("No DME offered", "DME off-the-shelf, non-custom, unaccredited", "DME full range and custom, unaccredited",
"DME for pharmaceuticals and diabetic testing, accredited", "DME off-the-shelf, non-custom, accredited",
"DME full range and custom, accredite", "Unknown")),
walkinclinic_bin = as.character(Walkin.Clinic.Indicator),
walkinclinic_cat = factor(Walkin.Clinic.Code,
levels = c("19", "20", "21", "22", NA),
labels = c("No walk-in clinic", "Walk-in clinic with limited services, mid-level professional",
"Walk-in clinic with limited services, licensed physician",
"Onsite emergency room", "Unknown")),
emerg24h_bin = as.character(X24h.Emergency.Service.Indicator),
emerg24h_cat = factor(X24h.Emergency.Service.Code,
levels = c("23", "24", "25", "26", "27", NA),
labels = c("No 24h emergency service", "24h emergency remote pharmacist (call center)", "24h emergency remote pharmacist (local)",
"24h emergency pharmacist with in-person access", "24h in-person emergency pharmacist service", "Unknown")),
multidosepkg_bin = as.character(Multidose.Compliance.Indicator),
multidosepkg_cat = factor(Multidose.Compliance.Code,
levels = c("28", "29", "30", NA),
labels = c("No multidose compliance packaging", "Multidose compliance packaging to assisted living facilities only",
"Multidose compliance packaging to all", "Unknown")),
immunizations_bin = as.character(Immunizations.Provided.Indicator),
immunizations_cat = factor(Immunizations.Provided.Code,
levels = c("31", "32", "33", NA),
labels = c("No on-site immunizations", "Immunization services at select dates and times",
"Immunization services during business hours", "Unknown")),
handicapaccess_bin = as.character(Handicapped.Accessible.Indicator),
is340b_bin = as.character(X340B.Status.Indicator),
is340b_cat = factor(X340B.Status.Code,
levels = c("36", "37", "38", "39", NA),
labels = c("No 340B relationships", "Not owned by 340B entity but contracts to covered entities",
"Owned by 340B entity but also serves non-eligible patients", "Owned by 340B entity and only serves eligible patients",
"Unknown"))
) %>%
select(-ID,-NCPDP.Provider.ID, -Primary.Provider.Type.Code, -Secondary.Provider.Type.Code, -Tertiary.Provider.Type.Code, -Dispenser.Class.Code, -Medicare.Provider.ID, National.Provider.ID..NPI.,
-DBA.Name, -Physical.Address.1, -Physical.Address.2, -Physical.Address.City, -Physical.Address.State, -Physical.Address.ZIP, -County.FIPS, -MSA, -Open.24.Hours,
-Language.Code.1, -Language.Code.2, -Language.Code.3, -Language.Code.4, -Language.Code.5, -Closed.Door.Facility.Indicator, -Closed.Door.Facility.Status.Code
-Accepts.ePrescriptions.Code, -Accepts.ePrescriptions.Indicator, -Delivery.Service.Indicator, -Delivery.Service.Code, -Compounding.Service.Indicator,
-Driveup.Window.Code, -Driveup.Window.Indicator, -DME.Indicator,-DME.Code, -Walkin.Clinic.Indicator,-Walkin.Clinic.Indicator, -Multidose.Compliance.Indicator, -Multidose.Compliance.Code,
-Immunizations.Provided.Indicator, -Immunizations.Provided.Code, -Handicapped.Accessible.Indicator, -Handicapped.Accessible.Code, -X340B.Status.Indicator, -X340B.Status.Code) # removing some more columns after going through each of these
pharmgeo_df3 <- pharmgeo_df2 %>%
filter(Closed.Door.Facility.Indicator %in% "N", # removed 1156 closed door facilities here as well
Dispenser.Class.Code %in% "7") %>%       # removed 288 alternate dispensing sites as well
mutate(ID = as.character(ID.x),
ncpdp_id = as.character(NCPDP.Provider.ID),
legal_name = as.character(Legal.Business.Name),
dba_name = as.character(DBA.Name),
address1 = as.character(Physical.Address.1),
address2 = as.character(Physical.Address.2),
city = as.character(Physical.Address.City),
state = as.character(Physical.Address.State),
zip = as.character(Physical.Address.ZIP),
county_fips = as.character(County.FIPS),
msa = as.character(MSA),
open24h = factor(Open.24.Hours,
levels = c("N", "Y"),            # May need to code as 0/1 eventually? Use case_when
labels = c("No", "Yes")),
lang1 = as.character(Language.Code.1),                   # Language Codes indicate if the language is spoken at the pharmacy.
lang2 = as.character(Language.Code.2),
lang3 = as.character(Language.Code.3),
lang4 = as.character(Language.Code.4),
lang5 = as.character(Language.Code.5),
# english = ,                                           # Create a variable indicating if language is spoken at any of these pharmacies. See data dictionary.
# spanish = ,
# chinese = ,
# arabic = ,
# french = ,
# hindi = ,
# korean = ,
# italian = ,
# russian = ,
# vietnamese = ,
dispenserclass = factor(Dispenser.Class.Code,
levels = c("1","2","5","6"),
labels = c("Independent", "Chain", "Franchise","Government")),
medicare_id = as.character(Medicare.Provider.ID),
npi_id = as.character(National.Provider.ID..NPI.),
maildelivery_bin = as.character(Delivery.Service.Indicator),
maildelivery_cat = factor(Delivery.Service.Code,
levels = c("3", "4", "5",
labels = c("No Rx Delivery", "Rx Delivery For A Fee", "Free Rx Delivery")),
compounding_bin = as.character(Compounding.Service.Indicator),
compounding_cat = factor(Compounding.Service.Code,
levels = c("6", "7", "8", "9", "10"),
labels = c("No compounding services", "Basic non-sterile compounding", "Complex non-sterile compounding",
"Low complexity sterile compounding", "High complexity sterile compounding")),
driveup_bin = as.character(Driveup.Window.Indicator),
dme_bin = as.character(DME.Indicator),
dme_cat = factor(DME.Code,
levels = c("13", "14", "15", "16", "17", "18"),
labels = c("No DME offered", "DME off-the-shelf, non-custom, unaccredited", "DME full range and custom, unaccredited",
"DME for pharmaceuticals and diabetic testing, accredited", "DME off-the-shelf, non-custom, accredited",
"DME full range and custom, accredited")),
walkinclinic_bin = as.character(Walkin.Clinic.Indicator),
walkinclinic_cat = factor(Walkin.Clinic.Code,
levels = c("19", "20", "21", "22"),
labels = c("No walk-in clinic", "Walk-in clinic with limited services, mid-level professional",
"Walk-in clinic with limited services, licensed physician",
"Onsite emergency room")),
emerg24h_bin = as.character(X24h.Emergency.Service.Indicator),
emerg24h_cat = factor(X24h.Emergency.Service.Code,
levels = c("23", "24", "25", "26", "27"),
labels = c("No 24h emergency service", "24h emergency remote pharmacist (call center)", "24h emergency remote pharmacist (local)",
"24h emergency pharmacist with in-person access", "24h in-person emergency pharmacist service")),
multidosepkg_bin = as.character(Multidose.Compliance.Indicator),
multidosepkg_cat = factor(Multidose.Compliance.Code,
levels = c("28", "29", "30"),
labels = c("No multidose compliance packaging", "Multidose compliance packaging to assisted living facilities only",
"Multidose compliance packaging to all")),
immunizations_bin = as.character(Immunizations.Provided.Indicator),
immunizations_cat = factor(Immunizations.Provided.Code,
levels = c("31", "32", "33"),
labels = c("No on-site immunizations", "Immunization services at select dates and times",
"Immunization services during business hours")),
handicapaccess_bin = as.character(Handicapped.Accessible.Indicator),
is340b_bin = as.character(X340B.Status.Indicator),
is340b_cat = factor(X340B.Status.Code,
levels = c("36", "37", "38", "39"),
labels = c("No 340B relationships", "Not owned by 340B entity but contracts to covered entities",
"Owned by 340B entity but also serves non-eligible patients",
"Owned by 340B entity and only serves eligible patients")))) %>%
select(-ID,-NCPDP.Provider.ID, -Primary.Provider.Type.Code, -Secondary.Provider.Type.Code, -Tertiary.Provider.Type.Code, -Dispenser.Class.Code, -Medicare.Provider.ID, National.Provider.ID..NPI.,
-DBA.Name, -Physical.Address.1, -Physical.Address.2, -Physical.Address.City, -Physical.Address.State, -Physical.Address.ZIP, -County.FIPS, -MSA, -Open.24.Hours,
-Language.Code.1, -Language.Code.2, -Language.Code.3, -Language.Code.4, -Language.Code.5, -Closed.Door.Facility.Indicator, -Closed.Door.Facility.Status.Code,
-Accepts.ePrescriptions.Code, -Accepts.ePrescriptions.Indicator, -Delivery.Service.Indicator, -Delivery.Service.Code, -Compounding.Service.Indicator,
-Driveup.Window.Code, -Driveup.Window.Indicator, -DME.Indicator, -DME.Code, -Walkin.Clinic.Indicator, -Walkin.Clinic.Indicator, -Multidose.Compliance.Indicator, -Multidose.Compliance.Code,
-Immunizations.Provided.Indicator, -Immunizations.Provided.Code, -Handicapped.Accessible.Indicator, -Handicapped.Accessible.Code, -X340B.Status.Indicator, -X340B.Status.Code)
# go one by one and update the class and factor levels- see HSERV 523 code
pharmgeo_df3 <- pharmgeo_df2 %>%
filter(Closed.Door.Facility.Indicator %in% "N", # removed 1156 closed door facilities here as well
Dispenser.Class.Code %in% "7") %>%       # removed 288 alternate dispensing sites as well
mutate(ID = as.character(ID.x),
ncpdp_id = as.character(NCPDP.Provider.ID),
legal_name = as.character(Legal.Business.Name),
dba_name = as.character(DBA.Name),
address1 = as.character(Physical.Address.1),
address2 = as.character(Physical.Address.2),
city = as.character(Physical.Address.City),
state = as.character(Physical.Address.State),
zip = as.character(Physical.Address.ZIP),
county_fips = as.character(County.FIPS),
msa = as.character(MSA),
open24h = factor(Open.24.Hours,
levels = c("N", "Y"),            # May need to code as 0/1 eventually? Use case_when
labels = c("No", "Yes")),
lang1 = as.character(Language.Code.1),                   # Language Codes indicate if the language is spoken at the pharmacy.
lang2 = as.character(Language.Code.2),
lang3 = as.character(Language.Code.3),
lang4 = as.character(Language.Code.4),
lang5 = as.character(Language.Code.5),  # make binary # english = , # spanish = , # chinese = ,# arabic = ,# french = , # hindi = , # korean = ,# italian = , # russian = , # vietnamese =
dispenserclass = factor(Dispenser.Class.Code,
levels = c("1","2","5","6"),
labels = c("Independent", "Chain", "Franchise","Government")),
medicare_id = as.character(Medicare.Provider.ID),
npi_id = as.character(National.Provider.ID..NPI.),
maildelivery_bin = as.character(Delivery.Service.Indicator),
maildelivery_cat = factor(Delivery.Service.Code,
levels = c("3", "4", "5"),
labels = c("No Rx Delivery", "Rx Delivery For A Fee", "Free Rx Delivery")),
compounding_bin = as.character(Compounding.Service.Indicator),
compounding_cat = factor(Compounding.Service.Code,
levels = c("6", "7", "8", "9", "10"),
labels = c("No compounding services", "Basic non-sterile compounding", "Complex non-sterile compounding",
"Low complexity sterile compounding", "High complexity sterile compounding")),
driveup_bin = as.character(Driveup.Window.Indicator),
dme_bin = as.character(DME.Indicator),
dme_cat = factor(DME.Code,
levels = c("13", "14", "15", "16", "17", "18"),
labels = c("No DME offered", "DME off-the-shelf, non-custom, unaccredited", "DME full range and custom, unaccredited",
"DME for pharmaceuticals and diabetic testing, accredited", "DME off-the-shelf, non-custom, accredited",
"DME full range and custom, accredited")),
walkinclinic_bin = as.character(Walkin.Clinic.Indicator),
walkinclinic_cat = factor(Walkin.Clinic.Code,
levels = c("19", "20", "21", "22"),
labels = c("No walk-in clinic", "Walk-in clinic with limited services, mid-level professional",
"Walk-in clinic with limited services, licensed physician",
"Onsite emergency room")),
emerg24h_bin = as.character(X24h.Emergency.Service.Indicator),
emerg24h_cat = factor(X24h.Emergency.Service.Code,
levels = c("23", "24", "25", "26", "27"),
labels = c("No 24h emergency service", "24h emergency remote pharmacist (call center)", "24h emergency remote pharmacist (local)",
"24h emergency pharmacist with in-person access", "24h in-person emergency pharmacist service")),
multidosepkg_bin = as.character(Multidose.Compliance.Indicator),
multidosepkg_cat = factor(Multidose.Compliance.Code,
levels = c("28", "29", "30"),
labels = c("No multidose compliance packaging", "Multidose compliance packaging to assisted living facilities only",
"Multidose compliance packaging to all")),
immunizations_bin = as.character(Immunizations.Provided.Indicator),
immunizations_cat = factor(Immunizations.Provided.Code,
levels = c("31", "32", "33"),
labels = c("No on-site immunizations", "Immunization services at select dates and times",
"Immunization services during business hours")),
handicapaccess_bin = as.character(Handicapped.Accessible.Indicator),
is340b_bin = as.character(X340B.Status.Indicator),
is340b_cat = factor(X340B.Status.Code,
levels = c("36", "37", "38", "39"),
labels = c("No 340B relationships", "Not owned by 340B entity but contracts to covered entities",
"Owned by 340B entity but also serves non-eligible patients",
"Owned by 340B entity and only serves eligible patients"))) %>%
select(-ID,-NCPDP.Provider.ID, -Primary.Provider.Type.Code, -Secondary.Provider.Type.Code, -Tertiary.Provider.Type.Code, -Dispenser.Class.Code, -Medicare.Provider.ID, National.Provider.ID..NPI.,
-DBA.Name, -Physical.Address.1, -Physical.Address.2, -Physical.Address.City, -Physical.Address.State, -Physical.Address.ZIP, -County.FIPS, -MSA, -Open.24.Hours,
-Language.Code.1, -Language.Code.2, -Language.Code.3, -Language.Code.4, -Language.Code.5, -Closed.Door.Facility.Indicator, -Closed.Door.Facility.Status.Code,
-Accepts.ePrescriptions.Code, -Accepts.ePrescriptions.Indicator, -Delivery.Service.Indicator, -Delivery.Service.Code, -Compounding.Service.Indicator,
-Driveup.Window.Code, -Driveup.Window.Indicator, -DME.Indicator, -DME.Code, -Walkin.Clinic.Indicator, -Walkin.Clinic.Indicator, -Multidose.Compliance.Indicator, -Multidose.Compliance.Code,
-Immunizations.Provided.Indicator, -Immunizations.Provided.Code, -Handicapped.Accessible.Indicator, -Handicapped.Accessible.Code, -X340B.Status.Indicator, -X340B.Status.Code) # removing some more columns after going through each of these
colnames(pharmgeo_df3)
pharmgeo_df3 <- pharmgeo_df2 %>%
filter(Closed.Door.Facility.Indicator %in% "N", # removed 1156 closed door facilities here as well
Dispenser.Class.Code %in% "7") %>%       # removed 288 alternate dispensing sites as well
mutate(ID = as.character(ID.x),
ncpdp_id = as.character(NCPDP.Provider.ID),
legal_name = as.character(Legal.Business.Name),
dba_name = as.character(DBA.Name),
address1 = as.character(Physical.Address.1),
address2 = as.character(Physical.Address.2),
city = as.character(Physical.Address.City),
state = as.character(Physical.Address.State),
zip = as.character(Physical.Address.ZIP),
county_fips = as.character(County.FIPS),
msa = as.character(MSA),
open24h = factor(Open.24.Hours,
levels = c("N", "Y"),            # May need to code as 0/1 eventually? Use case_when
labels = c("No", "Yes")),
lang1 = as.character(Language.Code.1),                   # Language Codes indicate if the language is spoken at the pharmacy.
lang2 = as.character(Language.Code.2),
lang3 = as.character(Language.Code.3),
lang4 = as.character(Language.Code.4),
lang5 = as.character(Language.Code.5),  # make binary # english = , # spanish = , # chinese = ,# arabic = ,# french = , # hindi = , # korean = ,# italian = , # russian = , # vietnamese =
dispenserclass = factor(Dispenser.Class.Code,
levels = c("1","2","5","6"),
labels = c("Independent", "Chain", "Franchise","Government")),
medicare_id = as.character(Medicare.Provider.ID),
npi_id = as.character(National.Provider.ID..NPI.),
maildelivery_bin = as.character(Delivery.Service.Indicator),
maildelivery_cat = factor(Delivery.Service.Code,
levels = c("3", "4", "5"),
labels = c("No Rx Delivery", "Rx Delivery For A Fee", "Free Rx Delivery")),
compounding_bin = as.character(Compounding.Service.Indicator),
compounding_cat = factor(Compounding.Service.Code,
levels = c("6", "7", "8", "9", "10"),
labels = c("No compounding services", "Basic non-sterile compounding", "Complex non-sterile compounding",
"Low complexity sterile compounding", "High complexity sterile compounding")),
driveup_bin = as.character(Driveup.Window.Indicator),
dme_bin = as.character(DME.Indicator),
dme_cat = factor(DME.Code,
levels = c("13", "14", "15", "16", "17", "18"),
labels = c("No DME offered", "DME off-the-shelf, non-custom, unaccredited", "DME full range and custom, unaccredited",
"DME for pharmaceuticals and diabetic testing, accredited", "DME off-the-shelf, non-custom, accredited",
"DME full range and custom, accredited")),
walkinclinic_bin = as.character(Walkin.Clinic.Indicator),
walkinclinic_cat = factor(Walkin.Clinic.Code,
levels = c("19", "20", "21", "22"),
labels = c("No walk-in clinic", "Walk-in clinic with limited services, mid-level professional",
"Walk-in clinic with limited services, licensed physician",
"Onsite emergency room")),
emerg24h_bin = as.character(X24h.Emergency.Service.Indicator),
emerg24h_cat = factor(X24h.Emergency.Service.Code,
levels = c("23", "24", "25", "26", "27"),
labels = c("No 24h emergency service", "24h emergency remote pharmacist (call center)", "24h emergency remote pharmacist (local)",
"24h emergency pharmacist with in-person access", "24h in-person emergency pharmacist service")),
multidosepkg_bin = as.character(Multidose.Compliance.Indicator),
multidosepkg_cat = factor(Multidose.Compliance.Code,
levels = c("28", "29", "30"),
labels = c("No multidose compliance packaging", "Multidose compliance packaging to assisted living facilities only",
"Multidose compliance packaging to all")),
immunizations_bin = as.character(Immunizations.Provided.Indicator),
immunizations_cat = factor(Immunizations.Provided.Code,
levels = c("31", "32", "33"),
labels = c("No on-site immunizations", "Immunization services at select dates and times",
"Immunization services during business hours")),
handicapaccess_bin = as.character(Handicapped.Accessible.Indicator),
is340b_bin = as.character(X340B.Status.Indicator),
is340b_cat = factor(X340B.Status.Code,
levels = c("36", "37", "38", "39"),
labels = c("No 340B relationships", "Not owned by 340B entity but contracts to covered entities",
"Owned by 340B entity but also serves non-eligible patients",
"Owned by 340B entity and only serves eligible patients"))) %>%
select(-ID,-NCPDP.Provider.ID, -Primary.Provider.Type.Code, -Secondary.Provider.Type.Code, -Tertiary.Provider.Type.Code, -Dispenser.Class.Code, -Medicare.Provider.ID, National.Provider.ID..NPI.,
-DBA.Name, -Physical.Address.1, -Physical.Address.2, -Physical.Address.City, -Physical.Address.State, -Physical.Address.ZIP, -County.FIPS, -MSA, -Open.24.Hours,
-Language.Code.1, -Language.Code.2, -Language.Code.3, -Language.Code.4, -Language.Code.5, -Closed.Door.Facility.Indicator, -Closed.Door.Facility.Status.Code,
-Accepts.ePrescriptions.Code, -Accepts.ePrescriptions.Indicator, -Delivery.Service.Indicator, -Delivery.Service.Code, -Compounding.Service.Indicator,
-Driveup.Window.Code, -Driveup.Window.Indicator, -DME.Indicator, -DME.Code, -Walkin.Clinic.Indicator, -Walkin.Clinic.Indicator, -Multidose.Compliance.Indicator, -Multidose.Compliance.Code,
-Immunizations.Provided.Indicator, -Immunizations.Provided.Code, -Handicapped.Accessible.Indicator, -Handicapped.Accessible.Code, -X340B.Status.Indicator, -X340B.Status.Code,
-ID.x, -Legal.Business.Name, -National.Provider.ID..NPI., -Compounding.Service.Code, -Compounding.Service.Indicator, -Walkin.Clinic.Code,
-X24h.Emergency.Service.Indicator, -X24h.Emergency.Service.Code)
pharmgeo_df3 <- pharmgeo_df2 %>%
filter(Closed.Door.Facility.Indicator %in% "N", # removed 1156 closed door facilities here as well
Dispenser.Class.Code %in% "7") %>%       # removed 288 alternate dispensing sites as well
mutate(ID = as.character(ID.x),
ncpdp_id = as.character(NCPDP.Provider.ID),
legal_name = as.character(Legal.Business.Name),
dba_name = as.character(DBA.Name),
address1 = as.character(Physical.Address.1),
address2 = as.character(Physical.Address.2),
city = as.character(Physical.Address.City),
state = as.character(Physical.Address.State),
zip = as.character(Physical.Address.ZIP),
county_fips = as.character(County.FIPS),
msa = as.character(MSA),
open24h = factor(Open.24.Hours,
levels = c("N", "Y"),            # May need to code as 0/1 eventually? Use case_when
labels = c("No", "Yes")),
lang1 = as.character(Language.Code.1),                   # Language Codes indicate if the language is spoken at the pharmacy.
lang2 = as.character(Language.Code.2),
lang3 = as.character(Language.Code.3),
lang4 = as.character(Language.Code.4),
lang5 = as.character(Language.Code.5),  # make binary # english = , # spanish = , # chinese = ,# arabic = ,# french = , # hindi = , # korean = ,# italian = , # russian = , # vietnamese =
dispenserclass = factor(Dispenser.Class.Code,
levels = c("1","2","5","6"),
labels = c("Independent", "Chain", "Franchise","Government")),
medicare_id = as.character(Medicare.Provider.ID),
npi_id = as.character(National.Provider.ID..NPI.),
maildelivery_bin = as.character(Delivery.Service.Indicator),
maildelivery_cat = factor(Delivery.Service.Code,
levels = c("3", "4", "5"),
labels = c("No Rx Delivery", "Rx Delivery For A Fee", "Free Rx Delivery")),
compounding_bin = as.character(Compounding.Service.Indicator),
compounding_cat = factor(Compounding.Service.Code,
levels = c("6", "7", "8", "9", "10"),
labels = c("No compounding services", "Basic non-sterile compounding", "Complex non-sterile compounding",
"Low complexity sterile compounding", "High complexity sterile compounding")),
driveup_bin = as.character(Driveup.Window.Indicator),
dme_bin = as.character(DME.Indicator),
dme_cat = factor(DME.Code,
levels = c("13", "14", "15", "16", "17", "18"),
labels = c("No DME offered", "DME off-the-shelf, non-custom, unaccredited", "DME full range and custom, unaccredited",
"DME for pharmaceuticals and diabetic testing, accredited", "DME off-the-shelf, non-custom, accredited",
"DME full range and custom, accredited")),
walkinclinic_bin = as.character(Walkin.Clinic.Indicator),
walkinclinic_cat = factor(Walkin.Clinic.Code,
levels = c("19", "20", "21", "22"),
labels = c("No walk-in clinic", "Walk-in clinic with limited services, mid-level professional",
"Walk-in clinic with limited services, licensed physician",
"Onsite emergency room")),
emerg24h_bin = as.character(X24h.Emergency.Service.Indicator),
emerg24h_cat = factor(X24h.Emergency.Service.Code,
levels = c("23", "24", "25", "26", "27"),
labels = c("No 24h emergency service", "24h emergency remote pharmacist (call center)", "24h emergency remote pharmacist (local)",
"24h emergency pharmacist with in-person access", "24h in-person emergency pharmacist service")),
multidosepkg_bin = as.character(Multidose.Compliance.Indicator),
multidosepkg_cat = factor(Multidose.Compliance.Code,
levels = c("28", "29", "30"),
labels = c("No multidose compliance packaging", "Multidose compliance packaging to assisted living facilities only",
"Multidose compliance packaging to all")),
immunizations_bin = as.character(Immunizations.Provided.Indicator),
immunizations_cat = factor(Immunizations.Provided.Code,
levels = c("31", "32", "33"),
labels = c("No on-site immunizations", "Immunization services at select dates and times",
"Immunization services during business hours")),
handicapaccess_bin = as.character(Handicapped.Accessible.Indicator),
is340b_bin = as.character(X340B.Status.Indicator),
is340b_cat = factor(X340B.Status.Code,
levels = c("36", "37", "38", "39"),
labels = c("No 340B relationships", "Not owned by 340B entity but contracts to covered entities",
"Owned by 340B entity but also serves non-eligible patients",
"Owned by 340B entity and only serves eligible patients"))) %>%
select(-ID,-NCPDP.Provider.ID, -Primary.Provider.Type.Code, -Secondary.Provider.Type.Code, -Tertiary.Provider.Type.Code, -Dispenser.Class.Code, -Medicare.Provider.ID, National.Provider.ID..NPI.,
-DBA.Name, -Physical.Address.1, -Physical.Address.2, -Physical.Address.City, -Physical.Address.State, -Physical.Address.ZIP, -County.FIPS, -MSA, -Open.24.Hours,
-Language.Code.1, -Language.Code.2, -Language.Code.3, -Language.Code.4, -Language.Code.5, -Closed.Door.Facility.Indicator, -Closed.Door.Facility.Status.Code,
-Accepts.ePrescriptions.Code, -Accepts.ePrescriptions.Indicator, -Delivery.Service.Indicator, -Delivery.Service.Code, -Compounding.Service.Indicator,
-Driveup.Window.Code, -Driveup.Window.Indicator, -DME.Indicator, -DME.Code, -Walkin.Clinic.Indicator, -Walkin.Clinic.Indicator, -Multidose.Compliance.Indicator, -Multidose.Compliance.Code,
-Immunizations.Provided.Indicator, -Immunizations.Provided.Code, -Handicapped.Accessible.Indicator, -Handicapped.Accessible.Code, -X340B.Status.Indicator, -X340B.Status.Code,
-ID.x, -Legal.Business.Name, -National.Provider.ID..NPI., -Compounding.Service.Code, -Compounding.Service.Indicator, -Walkin.Clinic.Code,
-X24h.Emergency.Service.Indicator, -X24h.Emergency.Service.Code) # removing some more columns after going through each of these
colnames(pharmgeo_df3)
tigris_cache_dir(paste0(rootDir, "shapefiles/"))
tigris::counties?
tigris::counties()?
?tigris::counties()
#################
### Start reading in shapefiles and census data
# use Tigris to read in shapefiles directly using Census API (no local files needed)
counties_c <- tigris::counties(cb = TRUE, year = 2020)
head(counties_c)
#################
### Start reading in shapefiles and census data. Do a cache = TRUE
# use Tigris to read in shapefiles directly using Census API (no local files needed)
tract_c <- tigris::tracts(cb = TRUE, year = 2020) # default format is sf but can also set class = "sp" if needed. see help function for gg mapping
#################
### Start reading in shapefiles and census data. Do a cache = TRUE
# use Tigris to read in shapefiles directly using Census API (no local files needed)
counties_c <- tigris::counties(cb = TRUE, year = 2020)
groups_c <- tigris::block_groups(cb = TRUE, year = 2020)
Sys.getenv('TIGRIS_CACHE_DIR')
tigris_cache_dir(paste0(rootDir, "shapefiles/"))
rootDir <- "~/OneDrive/Documents/School Stuff/Dissertation/Pharmacy-Deserts-Analysis/"
inputDir <- paste0(rootDir, "Input/")
outputDir <- paste0(rootDir, "Output/")
figuresDir <- paste0(rootDir, "Figures/")
setwd(rootDir)
tigris_cache_dir(paste0(rootDir, "shapefiles/"))
Sys.getenv('TIGRIS_CACHE_DIR')
?tigris_cache_dir
paste0(rootDir, "shapefiles/")
shapefilesDir <- paste0(rootDir, "shapefiles/")
tigris_cache_dir(shapefilesDir)
