select(ncpdp_id, state) %>% mutate(GEOID_temp = NA)
pharmgeo_df3_temp$GEOID_temp <- as.character(base::apply(st_intersects(x = tract_c_temp, y = mypoints_sf2_temp, sparse = FALSE), 2,
FUN = function(col) {
tract_c_temp[which(col),]$GEOID
}))
pharmgeo_df4 <- left_join(pharmgeo_df3, pharmgeo_df3_temp, by = "ncpdp_id") %>% dplyr::select(-state.y)
pharmgeo_df4$GEOID <- ifelse(is.na(pharmgeo_df3$GEOID), pharmgeo_df3$GEOID_temp, pharmgeo_df3$GEOID)
table(pharmgeo_df4$GEOID, pharmgeo_df4$GEOID_temp, useNA = "always")
write.csv(pharmgeo_df4, "pharmgeodf4.csv")
pharmgeo_df4 <- left_join(pharmgeo_df3, pharmgeo_df3_temp, by = "ncpdp_id") %>% dplyr::select(-state.y)
pharmgeo_df4$GEOID <- ifelse(is.na(pharmgeo_df4$GEOID), pharmgeo_df4$GEOID_temp, pharmgeo_df4$GEOID)
write.csv(pharmgeo_df4, "pharmgeodf4.csv")
table(pharmgeo_df4$GEOID)
table(pharmgeo_df4$GEOID, useNA = "always")
pharmgeo_df3$GEOID <- NA
state_i <- "TX"
mypoints_sf2_temp <- mypoints_sf2 %>% filter(state %in% state_i)
tract_c_temp <- tract_c %>% filter(STUSPS %in% state_i)
pharmgeo_df3_temp <- pharmgeo_df3 %>% filter(state %in% state_i) %>%
select(ncpdp_id) %>% mutate(GEOID_temp = NA)
pharmgeo_df3_temp$GEOID_temp <- as.character(base::apply(st_intersects(x = tract_c_temp, y = mypoints_sf2_temp, sparse = FALSE), 2,
FUN = function(col) {
tract_c_temp[which(col),]$GEOID
}))
pharmgeo_df4 <- left_join(pharmgeo_df3, pharmgeo_df3_temp, by = "ncpdp_id")
head(pharmgeo_df4)
table(pharmgeo_df4$GEOID, useNA = "always")
pharmgeo_df4$GEOID <- ifelse(is.na(pharmgeo_df4$GEOID), pharmgeo_df4$GEOID_temp, pharmgeo_df4$GEOID)
write.csv(pharmgeo_df4, "phargeo4.csv")
pharmgeo_df3 <- full_join(pharmgeo_df2, missingaddresses2, by = "ncpdp_id")
pharmgeo_df3$lon <- ifelse(is.na(pharmgeo_df3$lon), pharmgeo_df3$lonnew, pharmgeo_df3$lon)
pharmgeo_df3$lat <- ifelse(is.na(pharmgeo_df3$lat), pharmgeo_df3$latnew, pharmgeo_df3$lat)
pharmgeo_df3 <- pharmgeo_df3 %>% select(-lonnew, -latnew)
############
# Assign each pharmacy to a census tract (by GEOID10)
# transform pharmacy lat/long dataframe to SF object
mypoints_sf <- st_as_sf(pharmgeo_df3,
coords = c("lon", "lat"),
crs = 4326) # set with WSG84 which is what Google maps uses for geocoding
# transform the pharmaddress SF to the same CRS as census data uses (census is NAD83 not WSG84)
# will use this mypoints_sf2 for mapping of points, as well as matching a pharmacy to a tract
mypoints_sf2 <- st_transform(mypoints_sf, crs = st_crs(tract_c))
# check that they are identical
identical(st_crs(tract_c),st_crs(mypoints_sf2)) # output is TRUE
# use st_intersects & apply function to assign each pharmacy point to a tract polygon
# takes a lot of memory, do a loop by each state
statelist <- pharmgeo_df3 %>% group_by(state) %>%
dplyr::summarise(n_pharm = n())
# State with the most pharmacies is TX (~5000), let's start with that one in the loop to make sure enough memory (WA only had ~1000)
# Vector of state abbreviations
statelist <- statelist$state
# create blank column to put the census tract GEOID into once its identified
pharmgeo_df3$GEOID <- NA
state_i <- "TX"
mypoints_sf2_temp <- mypoints_sf2 %>% filter(state %in% state_i)
tract_c_temp <- tract_c %>% filter(STUSPS %in% state_i)
pharmgeo_df3_temp <- pharmgeo_df3 %>% filter(state %in% state_i) %>%
select(ncpdp_id) %>% mutate(GEOID_temp = NA)
pharmgeo_df3_temp$GEOID_temp <- as.character(base::apply(st_intersects(x = tract_c_temp, y = mypoints_sf2_temp, sparse = FALSE), 2,
FUN = function(col) {
tract_c_temp[which(col),]$GEOID
}))
pharmgeo_df3 <- left_join(pharmgeo_df3, pharmgeo_df3_temp, by = "ncpdp_id")
pharmgeo_df3$GEOID <- ifelse(is.na(pharmgeo_df3$GEOID), pharmgeo_df3$GEOID_temp, pharmgeo_df3$GEOID)
state_i <- "CA"
mypoints_sf2_temp <- mypoints_sf2 %>% filter(state %in% state_i)
tract_c_temp <- tract_c %>% filter(STUSPS %in% state_i)
pharmgeo_df3_temp <- pharmgeo_df3 %>% filter(state %in% state_i) %>%
select(ncpdp_id) %>% mutate(GEOID_temp = NA)
pharmgeo_df3_temp$GEOID_temp <- as.character(base::apply(st_intersects(x = tract_c_temp, y = mypoints_sf2_temp, sparse = FALSE), 2,
FUN = function(col) {
tract_c_temp[which(col),]$GEOID
}))
pharmgeo_df3 <- left_join(pharmgeo_df3, pharmgeo_df3_temp, by = "ncpdp_id")
pharmgeo_df3$GEOID <- ifelse(is.na(pharmgeo_df3$GEOID), pharmgeo_df3$GEOID_temp, pharmgeo_df3$GEOID)
pharmgeo_df3 <- left_join(pharmgeo_df3, pharmgeo_df3_temp, by = "ncpdp_id")
head(pharmgeo_df3)
pharmgeo_df3 <- full_join(pharmgeo_df2, missingaddresses2, by = "ncpdp_id")
pharmgeo_df3$lon <- ifelse(is.na(pharmgeo_df3$lon), pharmgeo_df3$lonnew, pharmgeo_df3$lon)
pharmgeo_df3$lat <- ifelse(is.na(pharmgeo_df3$lat), pharmgeo_df3$latnew, pharmgeo_df3$lat)
pharmgeo_df3 <- pharmgeo_df3 %>% select(-lonnew, -latnew)
# Remove objects from our envt that we no longer need to maximize space/memory for the next step
# rm(result, providerinfo_df, pharmgeo_df, pharmgeo_df2, pharmacy_df, pharmacy_df1, pharmacy_df2, pharmacy_df2_2, test, missingadddresses, missingaddresses2)
############
# Assign each pharmacy to a census tract (by GEOID10)
# transform pharmacy lat/long dataframe to SF object
mypoints_sf <- st_as_sf(pharmgeo_df3,
coords = c("lon", "lat"),
crs = 4326) # set with WSG84 which is what Google maps uses for geocoding
# transform the pharmaddress SF to the same CRS as census data uses (census is NAD83 not WSG84)
# will use this mypoints_sf2 for mapping of points, as well as matching a pharmacy to a tract
mypoints_sf2 <- st_transform(mypoints_sf, crs = st_crs(tract_c))
# check that they are identical
identical(st_crs(tract_c),st_crs(mypoints_sf2)) # output is TRUE
# use st_intersects & apply function to assign each pharmacy point to a tract polygon
# takes a lot of memory, do a loop by each state
statelist <- pharmgeo_df3 %>% group_by(state) %>%
dplyr::summarise(n_pharm = n())
# State with the most pharmacies is TX (~5000), let's start with that one in the loop to make sure enough memory (WA only had ~1000)
# Vector of state abbreviations
statelist <- statelist$state
# Version with just TX then expand into loop:
# create blank column to put the census tract GEOID into once its identified
pharmgeo_df3$GEOID <- NA
state_i <- "TX"
mypoints_sf2_temp <- mypoints_sf2 %>% filter(state %in% state_i)
tract_c_temp <- tract_c %>% filter(STUSPS %in% state_i)
pharmgeo_df3_temp <- pharmgeo_df3 %>% filter(state %in% state_i) %>%
select(ncpdp_id) %>% mutate(GEOID_temp = NA)
pharmgeo_df3_temp$GEOID_temp <- as.character(base::apply(st_intersects(x = tract_c_temp, y = mypoints_sf2_temp, sparse = FALSE), 2,
FUN = function(col) {
tract_c_temp[which(col),]$GEOID
}))
pharmgeo_df4 <- left_join(pharmgeo_df3, pharmgeo_df3_temp, by = "ncpdp_id")
pharmgeo_df4$GEOID <- ifelse(is.na(pharmgeo_df4$GEOID), pharmgeo_df4$GEOID_temp, pharmgeo_df4$GEOID)
state_i <- "CA"
mypoints_sf2_temp <- mypoints_sf2 %>% filter(state %in% state_i)
tract_c_temp <- tract_c %>% filter(STUSPS %in% state_i)
pharmgeo_df3_temp <- pharmgeo_df3 %>% filter(state %in% state_i) %>%
select(ncpdp_id)
pharmgeo_df3_temp$GEOID_temp <- as.character(base::apply(st_intersects(x = tract_c_temp, y = mypoints_sf2_temp, sparse = FALSE), 2,
FUN = function(col) {
tract_c_temp[which(col),]$GEOID
}))
pharmgeo_df3 <- full_join(pharmgeo_df2, missingaddresses2, by = "ncpdp_id")
pharmgeo_df3$lon <- ifelse(is.na(pharmgeo_df3$lon), pharmgeo_df3$lonnew, pharmgeo_df3$lon)
pharmgeo_df3$lat <- ifelse(is.na(pharmgeo_df3$lat), pharmgeo_df3$latnew, pharmgeo_df3$lat)
pharmgeo_df3 <- pharmgeo_df3 %>% select(-lonnew, -latnew)
mypoints_sf <- st_as_sf(pharmgeo_df3,
coords = c("lon", "lat"),
crs = 4326) # set with WSG84 which is what Google maps uses for geocoding
# transform the pharmaddress SF to the same CRS as census data uses (census is NAD83 not WSG84)
# will use this mypoints_sf2 for mapping of points, as well as matching a pharmacy to a tract
mypoints_sf2 <- st_transform(mypoints_sf, crs = st_crs(tract_c))
# check that they are identical
identical(st_crs(tract_c),st_crs(mypoints_sf2)) # output is TRUE
# use st_intersects & apply function to assign each pharmacy point to a tract polygon
# takes a lot of memory, do a loop by each state
statelist <- pharmgeo_df3 %>% group_by(state) %>%
dplyr::summarise(n_pharm = n())
# State with the most pharmacies is TX (~5000), let's start with that one in the loop to make sure enough memory (WA only had ~1000)
# Vector of state abbreviations
statelist <- statelist$state
# goal of loop = create a dataframe of just ncpdp ids and GEOID of the tract. Do Rbind by state. Then will join this df by ncpdp_id to pharmgeo3 to make the full dataset
state_i <- "TX"
mypoints_sf2_temp <- mypoints_sf2 %>% filter(state %in% state_i)
tract_c_temp <- tract_c %>% filter(STUSPS %in% state_i)
pharmgeo_df3_temp <- pharmgeo_df3 %>% filter(state %in% state_i) %>%
select(ncpdp_id)
pharmgeo_df3_temp$GEOID_temp <- as.character(base::apply(st_intersects(x = tract_c_temp, y = mypoints_sf2_temp, sparse = FALSE), 2,
FUN = function(col) {
tract_c_temp[which(col),]$GEOID
}))
?do.call
# goal of loop = create a dataframe of just ncpdp ids and GEOID of the tract. Do Rbind by state. Then will join this df by ncpdp_id to pharmgeo3 to make the full dataset
tempstorage <- data.frame()
View(pharmgeo_df3_temp)
tempstorage <-rbind(tempstorage,pharmgeo_df3_temp)
state_i <- "CA"
mypoints_sf2_temp <- mypoints_sf2 %>% filter(state %in% state_i)
tract_c_temp <- tract_c %>% filter(STUSPS %in% state_i)
pharmgeo_df3_temp <- pharmgeo_df3 %>% filter(state %in% state_i) %>%
select(ncpdp_id)
pharmgeo_df3_temp$GEOID_temp <- as.character(base::apply(st_intersects(x = tract_c_temp, y = mypoints_sf2_temp, sparse = FALSE), 2,
FUN = function(col) {
tract_c_temp[which(col),]$GEOID
}))
tempstorage <-rbind(tempstorage,pharmgeo_df3_temp)
# goal of loop = create a dataframe of just ncpdp ids and GEOID of the tract. Do Rbind by state. Then will join this df by ncpdp_id to pharmgeo3 to make the full dataset
tempstorage <- data.frame()
class(mypoints_sf2)
class(pharmgeo_df3)
rootDir <- "~/OneDrive/Documents/School Stuff/Dissertation/Pharmacy-Deserts-Analysis/"
inputDir <- paste0(rootDir, "Input/")
outputDir <- paste0(rootDir, "Output/")
figuresDir <- paste0(rootDir, "Figures/")
# shapefilesDir <- paste0(rootDir, "shapefiles/")
setwd(rootDir)
# RUCA codes from USDA https://www.ers.usda.gov/data-products/rural-urban-commuting-area-codes.aspx .
# As of Dec 2022 only 2010 RUCA codes are available- check again in a few months
ruca_df <- readxl::read_excel(paste0(inputDir,"ruca2010revised.xlsx"), sheet = 1, skip = 1) %>%
rename(county_FIPS = `State-County FIPS Code`,
state = `Select State`,
tract_FIPS = `State-County-Tract FIPS Code (lookup by address at http://www.ffiec.gov/Geocode/)`,
ruca_1 = `Primary RUCA Code 2010`,
ruca_2 = `Secondary RUCA Code, 2010 (see errata)`) %>%
select(-`Tract Population, 2010`,-`Land Area (square miles), 2010`,-`Population Density (per square mile), 2010`)
counties_c <- tigris::counties(cb = TRUE, year = 2020)
tract_c <- tigris::tracts(cb = TRUE, year = 2020) # de
# read in df with geocoding complete: work with this data from now on
pharmgeo_df <- read.csv("pharmacy_geo.csv")[,-1]
# crosstab columns, rename variables, drop unnecessary variables
pharmgeo_df2 <- pharmgeo_df %>%
filter(Closed.Door.Facility.Indicator != "Y", # removed 1156 closed door facilities here as well
Dispenser.Class.Code != "7") %>%       # removed 288 alternate dispensing sites as well
mutate(ID = as.character(ID.x),
ncpdp_id = as.character(NCPDP.Provider.ID),
legal_name = as.character(Legal.Business.Name),
dba_name = as.character(DBA.Name),
address1 = as.character(Physical.Address.1),
address2 = as.character(Physical.Address.2),
city = as.character(Physical.Address.City),
state = as.character(Physical.Address.State),
zip = as.character(Physical.Address.ZIP),
county_fips = as.character(County.FIPS),
msa = as.character(MSA),
open24h_bin = as.character(Open.24.Hours),
lang1 = as.character(Language.Code.1),                   # Language Codes indicate if the language is spoken at the pharmacy.
lang2 = as.character(Language.Code.2),
lang3 = as.character(Language.Code.3),
lang4 = as.character(Language.Code.4),
lang5 = as.character(Language.Code.5),  # Eventually, make binary # english = , # spanish = , # chinese = ,# arabic = ,# french = , # hindi = , # korean = ,# italian = , # russian = , # vietnamese =
dispenserclass_cat = factor(Dispenser.Class.Code,
levels = c("1","2","5","6"),
labels = c("Independent", "Chain", "Franchise","Government")),
medicare_id = as.character(Medicare.Provider.ID),
npi_id = as.character(National.Provider.ID..NPI.),
maildelivery_bin = as.character(Delivery.Service.Indicator),
maildelivery_cat = factor(Delivery.Service.Code,
levels = c("3", "4", "5"),
labels = c("No Rx Delivery", "Rx Delivery For A Fee", "Free Rx Delivery")),
compounding_bin = as.character(Compounding.Service.Indicator),
compounding_cat = factor(Compounding.Service.Code,
levels = c("6", "7", "8", "9", "10"),
labels = c("No compounding services", "Basic non-sterile compounding", "Complex non-sterile compounding",
"Low complexity sterile compounding", "High complexity sterile compounding")),
driveup_bin = as.character(Driveup.Window.Indicator),
dme_bin = as.character(DME.Indicator),
dme_cat = factor(DME.Code,
levels = c("13", "14", "15", "16", "17", "18"),
labels = c("No DME offered", "DME off-the-shelf, non-custom, unaccredited", "DME full range and custom, unaccredited",
"DME for pharmaceuticals and diabetic testing, accredited", "DME off-the-shelf, non-custom, accredited",
"DME full range and custom, accredited")),
walkinclinic_bin = as.character(Walkin.Clinic.Indicator),
walkinclinic_cat = factor(Walkin.Clinic.Code,
levels = c("19", "20", "21", "22"),
labels = c("No walk-in clinic", "Walk-in clinic with limited services, mid-level professional",
"Walk-in clinic with limited services, licensed physician",
"Onsite emergency room")),
emerg24h_bin = as.character(X24h.Emergency.Service.Indicator),
emerg24h_cat = factor(X24h.Emergency.Service.Code,
levels = c("23", "24", "25", "26", "27"),
labels = c("No 24h emergency service", "24h emergency remote pharmacist (call center)", "24h emergency remote pharmacist (local)",
"24h emergency pharmacist with in-person access", "24h in-person emergency pharmacist service")),
multidosepkg_bin = as.character(Multidose.Compliance.Indicator),
multidosepkg_cat = factor(Multidose.Compliance.Code,
levels = c("28", "29", "30"),
labels = c("No multidose compliance packaging", "Multidose compliance packaging to assisted living facilities only",
"Multidose compliance packaging to all")),
immunizations_bin = as.character(Immunizations.Provided.Indicator),
immunizations_cat = factor(Immunizations.Provided.Code,
levels = c("31", "32", "33"),
labels = c("No on-site immunizations", "Immunization services at select dates and times",
"Immunization services during business hours")),
handicapaccess_bin = as.character(Handicapped.Accessible.Indicator),
is340b_bin = as.character(X340B.Status.Indicator),
is340b_cat = factor(X340B.Status.Code,
levels = c("36", "37", "38", "39"),
labels = c("No 340B relationships", "Not owned by 340B entity but contracts to covered entities",
"Owned by 340B entity but also serves non-eligible patients",
"Owned by 340B entity and only serves eligible patients"))) %>%
select(-ID,-NCPDP.Provider.ID, -Primary.Provider.Type.Code, -Secondary.Provider.Type.Code, -Tertiary.Provider.Type.Code, -Dispenser.Class.Code, -Medicare.Provider.ID, National.Provider.ID..NPI.,
-DBA.Name, -Physical.Address.1, -Physical.Address.2, -Physical.Address.City, -Physical.Address.State, -Physical.Address.ZIP, -County.FIPS, -MSA, -Open.24.Hours,
-Language.Code.1, -Language.Code.2, -Language.Code.3, -Language.Code.4, -Language.Code.5, -Closed.Door.Facility.Indicator, -Closed.Door.Facility.Status.Code,
-Accepts.ePrescriptions.Code, -Accepts.ePrescriptions.Indicator, -Delivery.Service.Indicator, -Delivery.Service.Code, -Compounding.Service.Indicator,
-Driveup.Window.Code, -Driveup.Window.Indicator, -DME.Indicator, -DME.Code, -Walkin.Clinic.Indicator, -Walkin.Clinic.Indicator, -Multidose.Compliance.Indicator, -Multidose.Compliance.Code,
-Immunizations.Provided.Indicator, -Immunizations.Provided.Code, -Handicapped.Accessible.Indicator, -Handicapped.Accessible.Code, -X340B.Status.Indicator, -X340B.Status.Code,
-ID.x, -Legal.Business.Name, -National.Provider.ID..NPI., -Compounding.Service.Code, -Compounding.Service.Indicator, -Walkin.Clinic.Code,
-X24h.Emergency.Service.Indicator, -X24h.Emergency.Service.Code, -Doctors.Name, -Store.Number, -Phone.Number, -Phone.Extension,
-Fax.Number, -Email.Address, -Cross.Streets, -PMSA, -Provider.Hours,
-Congressional.Voting.District, -Store.Open.Date, - Store.Close.Data,
-DEA.Registration.ID, - DEA.Expiration.Date, -Federal.Tax.ID.Number,
-State.Income.Tax.ID.Number, -Deactivation.Code, -Reinstatement.Code,
-Reinstatement.Date, -Transaction.Code, -Transaction.Date, -ID.y) # Drop unnecessary columns
missingaddresses2 <- read.csv("missingaddresses1.csv")
missingaddresses2$latnew <- missingaddresses2$lat
missingaddresses2$lonnew <- missingaddresses2$lon
missingaddresses2$ncpdp_id <- as.character(missingaddresses2$ncpdp_id)
missingaddresses2 <- missingaddresses2 %>% select(ncpdp_id, latnew, lonnew)
# Add lat and lon to pharmgeo_df for the addresses we identified manually (should be 0 NA lat/lon remaining)
pharmgeo_df3 <- full_join(pharmgeo_df2, missingaddresses2, by = "ncpdp_id")
pharmgeo_df3$lon <- ifelse(is.na(pharmgeo_df3$lon), pharmgeo_df3$lonnew, pharmgeo_df3$lon)
pharmgeo_df3$lat <- ifelse(is.na(pharmgeo_df3$lat), pharmgeo_df3$latnew, pharmgeo_df3$lat)
pharmgeo_df3 <- pharmgeo_df3 %>% select(-lonnew, -latnew)
############
# Assign each pharmacy to a census tract (by GEOID10)
# transform pharmacy lat/long dataframe to SF object
mypoints_sf <- st_as_sf(pharmgeo_df3,
coords = c("lon", "lat"),
crs = 4326) # set with WSG84 which is what Google maps uses for geocoding
# transform the pharmaddress SF to the same CRS as census data uses (census is NAD83 not WSG84)
# will use this mypoints_sf2 for mapping of points, as well as matching a pharmacy to a tract
mypoints_sf2 <- st_transform(mypoints_sf, crs = st_crs(tract_c))
# check that they are identical
identical(st_crs(tract_c),st_crs(mypoints_sf2)) # output is TRUE
# Assign each pharmacy point to a tract polygon use st_intersects & apply function
# This function takes a lot of memory, need to do it in a loop state by state
pharmbystate <- pharmgeo_df3 %>% group_by(state) %>% dplyr::summarise(n_pharm = n()) # count of pharmacies by state
# Vector of state abbreviations
statelist <- pharmbystate$state
# goal of loop = create a dataframe of just ncpdp ids and GEOID of the tract. Do Rbind by state. Then will join this df by ncpdp_id to pharmgeo3 to make the full dataset
# Create temporary storage dataframe to store output of each state loop
tempstorage <- data.frame()
for (state_i in statelist) {
# subset the pharmacy points and tracts to dfs of the state we are looping for
mypoints_sf2_temp <- mypoints_sf2 %>% filter(state %in% state_i)
tract_c_temp <- tract_c %>% filter(STUSPS %in% state_i)
# create an output df of the ncpdpd_id's for this state we are looping for
pharmgeo_df3_temp <- pharmgeo_df3 %>% filter(state %in% state_i) %>% select(ncpdp_id)
# function to assing GEOID to each ncpdp_id
pharmgeo_df3_temp$GEOID <- as.character(base::apply(st_intersects(x = tract_c_temp, y = mypoints_sf2_temp, sparse = FALSE), 2,
FUN = function(col) {
tract_c_temp[which(col),]$GEOID
}))
# bind the result of each iteration together as the consolidated output
tempstorage <-rbind(tempstorage,pharmgeo_df3_temp)
}
head(tempstorage)
# Join result of loop (GEOIDs) to pharmgeo_df to get our main dataframe of pharmacies now with GEOID of tract
pharmgeo_df4 <- left_join(pharmgeo_df3, tempstorage, by = "ncpdp_id")
# save as a csv so don't have to run this loop every time
write.csv(pharmgeo_df4, "pharmgeo_df4.csv")
# Join result of loop (GEOIDs) to pharmgeo_df to get our main dataframe of pharmacies now with GEOID of tract
pharmgeo_df4 <- left_join(pharmgeo_df3, tempstorage, by = "ncpdp_id")
# save as a csv so don't have to run this loop every time
write.csv(pharmgeo_df4, "pharmgeo_df4.csv")
install.packages("sumtable")
install.packages("vtable")
library(vtable)
library(tidycensus) # interface with census API to pull data tables
library(acs) # also use this to get data from census
library(tidyverse) # data manipulation
library(ggmap) # maps using the tidyverse
library(tigris) # read in tiger shapefiles
library(ggmap) # use to register google API key for geocoding
library(leaflet) # can use with open street map and Rshiny to make interactive maps
library(mapview) # another map-making package
library(sf) # spatial features package
library(rgdal) # reading in shapefiles
library(choroplethr) #making choropleth maps easily
library(choroplethrMaps) # goes with choroplethr
library(broom) # updated version of fortify function
library(rgeos) # use point in polygon function
library(htmlwidgets) # save interactive leaflet maps as html
library(shiny) # make interactive html site
library(RColorBrewer) # for R color scales in ggplot and leaflet
# Install Census and API keys
# Install Census and API keys
# # install census API key (only need to do this once per computer ever)
# my_api_key <- "083ae7aa6363d62361c694445ce61298cd1c2825"
# census_api_key(my_api_key, install = TRUE)
Sys.getenv("CENSUS_API_KEY") # to check if the api key is loaded
rootDir <- "~/OneDrive/Documents/School Stuff/Dissertation/Pharmacy-Deserts-Analysis/"
inputDir <- paste0(rootDir, "Input/")
outputDir <- paste0(rootDir, "Output/")
figuresDir <- paste0(rootDir, "Figures/")
# shapefilesDir <- paste0(rootDir, "shapefiles/")
setwd(rootDir)
getwd()
# Load files needed:
# NCPDP files: provider info and services
providerinfo_df <- readxl::read_excel(paste0(inputDir,"Provider Information Table.xlsx"))
services_df <- readxl::read_excel(paste0(inputDir,"Services Information Table.xlsx"))
# RUCA codes from USDA https://www.ers.usda.gov/data-products/rural-urban-commuting-area-codes.aspx .
# As of Dec 2022 only 2010 RUCA codes are available- check again in a few months
ruca_df <- readxl::read_excel(paste0(inputDir,"ruca2010revised.xlsx"), sheet = 1, skip = 1) %>%
rename(county_FIPS = `State-County FIPS Code`,
state = `Select State`,
tract_FIPS = `State-County-Tract FIPS Code (lookup by address at http://www.ffiec.gov/Geocode/)`,
ruca_1 = `Primary RUCA Code 2010`,
ruca_2 = `Secondary RUCA Code, 2010 (see errata)`) %>%
select(-`Tract Population, 2010`,-`Land Area (square miles), 2010`,-`Population Density (per square mile), 2010`)
# 3333333333333333333333333333333333333333333333333333333333333333333333333
# 3333333333333333333333333333333333333333333333333333333333333333333333333
# Finalize dataset for each row = pharmacy
# 3333333333333333333333333333333333333333333333333333333333333333333333333
# read in df with geocoding complete: work with this data from now on
pharmgeo_df <- read.csv("pharmacy_geo.csv")[,-1]
# Clean up names, classes, drop unnecessary columns
pharmgeo_df2 <- pharmgeo_df %>%
filter(Closed.Door.Facility.Indicator != "Y", # removed 1156 closed door facilities here as well
Dispenser.Class.Code != "7") %>%       # removed 288 alternate dispensing sites as well
mutate(ID = as.character(ID.x),
ncpdp_id = as.character(NCPDP.Provider.ID),
legal_name = as.character(Legal.Business.Name),
dba_name = as.character(DBA.Name),
address1 = as.character(Physical.Address.1),
address2 = as.character(Physical.Address.2),
city = as.character(Physical.Address.City),
state = as.character(Physical.Address.State),
zip = as.character(Physical.Address.ZIP),
county_fips = as.character(County.FIPS),
msa = as.character(MSA),
open24h_bin = as.character(Open.24.Hours),
lang1 = as.character(Language.Code.1),                   # Language Codes indicate if the language is spoken at the pharmacy.
lang2 = as.character(Language.Code.2),
lang3 = as.character(Language.Code.3),
lang4 = as.character(Language.Code.4),
lang5 = as.character(Language.Code.5),  # Eventually, make binary # english = , # spanish = , # chinese = ,# arabic = ,# french = , # hindi = , # korean = ,# italian = , # russian = , # vietnamese =
dispenserclass_cat = factor(Dispenser.Class.Code,
levels = c("1","2","5","6"),
labels = c("Independent", "Chain", "Franchise","Government")),
medicare_id = as.character(Medicare.Provider.ID),
npi_id = as.character(National.Provider.ID..NPI.),
maildelivery_bin = as.character(Delivery.Service.Indicator),
maildelivery_cat = factor(Delivery.Service.Code,
levels = c("3", "4", "5"),
labels = c("No Rx Delivery", "Rx Delivery For A Fee", "Free Rx Delivery")),
compounding_bin = as.character(Compounding.Service.Indicator),
compounding_cat = factor(Compounding.Service.Code,
levels = c("6", "7", "8", "9", "10"),
labels = c("No compounding services", "Basic non-sterile compounding", "Complex non-sterile compounding",
"Low complexity sterile compounding", "High complexity sterile compounding")),
driveup_bin = as.character(Driveup.Window.Indicator),
dme_bin = as.character(DME.Indicator),
dme_cat = factor(DME.Code,
levels = c("13", "14", "15", "16", "17", "18"),
labels = c("No DME offered", "DME off-the-shelf, non-custom, unaccredited", "DME full range and custom, unaccredited",
"DME for pharmaceuticals and diabetic testing, accredited", "DME off-the-shelf, non-custom, accredited",
"DME full range and custom, accredited")),
walkinclinic_bin = as.character(Walkin.Clinic.Indicator),
walkinclinic_cat = factor(Walkin.Clinic.Code,
levels = c("19", "20", "21", "22"),
labels = c("No walk-in clinic", "Walk-in clinic with limited services, mid-level professional",
"Walk-in clinic with limited services, licensed physician",
"Onsite emergency room")),
emerg24h_bin = as.character(X24h.Emergency.Service.Indicator),
emerg24h_cat = factor(X24h.Emergency.Service.Code,
levels = c("23", "24", "25", "26", "27"),
labels = c("No 24h emergency service", "24h emergency remote pharmacist (call center)", "24h emergency remote pharmacist (local)",
"24h emergency pharmacist with in-person access", "24h in-person emergency pharmacist service")),
multidosepkg_bin = as.character(Multidose.Compliance.Indicator),
multidosepkg_cat = factor(Multidose.Compliance.Code,
levels = c("28", "29", "30"),
labels = c("No multidose compliance packaging", "Multidose compliance packaging to assisted living facilities only",
"Multidose compliance packaging to all")),
immunizations_bin = as.character(Immunizations.Provided.Indicator),
immunizations_cat = factor(Immunizations.Provided.Code,
levels = c("31", "32", "33"),
labels = c("No on-site immunizations", "Immunization services at select dates and times",
"Immunization services during business hours")),
handicapaccess_bin = as.character(Handicapped.Accessible.Indicator),
is340b_bin = as.character(X340B.Status.Indicator),
is340b_cat = factor(X340B.Status.Code,
levels = c("36", "37", "38", "39"),
labels = c("No 340B relationships", "Not owned by 340B entity but contracts to covered entities",
"Owned by 340B entity but also serves non-eligible patients",
"Owned by 340B entity and only serves eligible patients"))) %>%
select(-ID,-NCPDP.Provider.ID, -Primary.Provider.Type.Code, -Secondary.Provider.Type.Code, -Tertiary.Provider.Type.Code, -Dispenser.Class.Code, -Medicare.Provider.ID, National.Provider.ID..NPI.,
-DBA.Name, -Physical.Address.1, -Physical.Address.2, -Physical.Address.City, -Physical.Address.State, -Physical.Address.ZIP, -County.FIPS, -MSA, -Open.24.Hours,
-Language.Code.1, -Language.Code.2, -Language.Code.3, -Language.Code.4, -Language.Code.5, -Closed.Door.Facility.Indicator, -Closed.Door.Facility.Status.Code,
-Accepts.ePrescriptions.Code, -Accepts.ePrescriptions.Indicator, -Delivery.Service.Indicator, -Delivery.Service.Code, -Compounding.Service.Indicator,
-Driveup.Window.Code, -Driveup.Window.Indicator, -DME.Indicator, -DME.Code, -Walkin.Clinic.Indicator, -Walkin.Clinic.Indicator, -Multidose.Compliance.Indicator, -Multidose.Compliance.Code,
-Immunizations.Provided.Indicator, -Immunizations.Provided.Code, -Handicapped.Accessible.Indicator, -Handicapped.Accessible.Code, -X340B.Status.Indicator, -X340B.Status.Code,
-ID.x, -Legal.Business.Name, -National.Provider.ID..NPI., -Compounding.Service.Code, -Compounding.Service.Indicator, -Walkin.Clinic.Code,
-X24h.Emergency.Service.Indicator, -X24h.Emergency.Service.Code, -Doctors.Name, -Store.Number, -Phone.Number, -Phone.Extension,
-Fax.Number, -Email.Address, -Cross.Streets, -PMSA, -Provider.Hours,
-Congressional.Voting.District, -Store.Open.Date, - Store.Close.Data,
-DEA.Registration.ID, - DEA.Expiration.Date, -Federal.Tax.ID.Number,
-State.Income.Tax.ID.Number, -Deactivation.Code, -Reinstatement.Code,
-Reinstatement.Date, -Transaction.Code, -Transaction.Date, -ID.y) # Drop unnecessary columns
# Manually fill in the addresses missing lon and lat from geocoding
# Check the addresses with NA for lon and lat
# missingadddresses <- pharmgeo_df2 %>%
#   filter(is.na(lat)) %>%
#   select(addresses, lat, lon, dba_name, legal_name, ncpdp_id,
#          address1, address2, city, state, zip, county_fips)
# write.csv(missingadddresses, "missingaddresses1.csv")
# Manual step here:
# look up the individual addresses for these 34 observationsin Google Maps
# add lat and lon to csv, read it back in
missingaddresses2 <- read.csv("missingaddresses1.csv")
missingaddresses2$latnew <- missingaddresses2$lat
missingaddresses2$lonnew <- missingaddresses2$lon
missingaddresses2$ncpdp_id <- as.character(missingaddresses2$ncpdp_id)
missingaddresses2 <- missingaddresses2 %>% select(ncpdp_id, latnew, lonnew)
# Add lat and lon to pharmgeo_df for the addresses we identified manually (should be 0 NA lat/lon remaining)
pharmgeo_df3 <- full_join(pharmgeo_df2, missingaddresses2, by = "ncpdp_id")
pharmgeo_df3$lon <- ifelse(is.na(pharmgeo_df3$lon), pharmgeo_df3$lonnew, pharmgeo_df3$lon)
pharmgeo_df3$lat <- ifelse(is.na(pharmgeo_df3$lat), pharmgeo_df3$latnew, pharmgeo_df3$lat)
pharmgeo_df3 <- pharmgeo_df3 %>% select(-lonnew, -latnew)
# Assign each pharmacy to a census tract (by GEOID10)
# transform pharmacy lat/long dataframe to SF object
mypoints_sf <- st_as_sf(pharmgeo_df3,
coords = c("lon", "lat"),
crs = 4326) # set with WSG84 which is what Google maps uses for geocoding
# transform the pharmaddress SF to the same CRS as census data uses (census is NAD83 not WSG84)
# will use this mypoints_sf2 for mapping of points, as well as matching a pharmacy to a tract
mypoints_sf2 <- st_transform(mypoints_sf, crs = st_crs(tract_c))
# check that they are identical
identical(st_crs(tract_c),st_crs(mypoints_sf2)) # output is TRUE
# Assign each pharmacy point to a tract polygon use st_intersects & apply function
# This function takes a lot of memory, need to do it in a loop state by state
pharmbystate <- pharmgeo_df3 %>% group_by(state) %>% dplyr::summarise(n_pharm = n()) # count of pharmacies by state
# Vector of state abbreviations
statelist <- pharmbystate$state
# goal of loop = create a dataframe of just ncpdp ids and GEOID of the tract. Do Rbind by state. Then will join this df by ncpdp_id to pharmgeo3 to make the full dataset
# Create temporary storage dataframe to store output of each state loop
tempstorage <- data.frame()
pharmgeo_df4 <- read.csv("pharmgeo_df4.csv")[,-1]
head(pharmgeo_df4)
# Group pharmgeo by by GEOID for census tract, count number of pharmacies per census tract
# drop pharmacy-specific cols (can add these back in later if needed for proportion with services)
# group_by and summarize geoid for n_pharm
# group by census tracts and count how many pharmacies there are
pharm_to_tract <- pharmgeo_df4 %>%
select(GEOID, ncpdp_id) %>%
group_by(GEOID) %>%
summarise(ph_per_tract = n()) %>%
arrange(desc(ph_per_tract))
head(pharm_to_tract)
View(pharm_to_tract)
